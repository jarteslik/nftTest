---
openapi: "3.0.3"
info:
  title: "OpenAPI definition"
  version: "v0.1"
  description: "Indexers use OpenAPI to describe APIs (and events). Clients (Kotlin,\
    \ TypeScript, etc.) and server controller interfaces automatically generated using\
    \ YAML OpenAPI files."
  license:
    name: "MIT"
    url: "https://github.com/rarible/ethereum-indexer/blob/master/api/LICENSE"
paths:
  /v0.1/transactions:
    post:
      tags:
      - "gateway-controller"
      operationId: "createGatewayPendingTransactions"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTransactionRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LogEvent"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GatewayApiError"
  /v0.1/erc20/balances/eth/{owner}:
    get:
      tags:
      - "balance-controller"
      description: "Return ETH balance"
      operationId: "getEthBalance"
      parameters:
      - name: "owner"
        description: "Address of the ETH owner"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      x-codeSamples:
      - lang: "cURL"
        source: "curl --request GET \\\n--url 'https://ethereum-api.rarible.org/v0.1/erc20/balances/eth/0x60f80121c31a0d46b5279700f9df786054aa5ee5'\n"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EthBalance"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Erc20IndexerApiError"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Erc20IndexerApiError"
  /v0.1/erc20/balances/{contract}/{owner}:
    get:
      tags:
      - "balance-controller"
      description: "Return ERC20 token balance"
      operationId: "getErc20Balance"
      parameters:
      - name: "contract"
        description: "Address of the contract"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "owner"
        description: "Address of the ERC20 token owner"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      x-codeSamples:
      - lang: "cURL"
        source: "curl --request GET \\\n--url 'https://ethereum-api.rarible.org/v0.1/erc20/balances/0x60f80121c31a0d46b5279700f9df786054aa5ee5/0x60f80121c31a0d46b5279700f9df786054aa5ee5'\n"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Erc20DecimalBalance"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Erc20IndexerApiError"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Erc20IndexerApiError"
  /v0.1/erc20/tokens/{contract}:
    get:
      tags:
      - "erc20-token-controller"
      description: "Return ERC20 token balance by ID"
      operationId: "getErc20TokenById"
      parameters:
      - name: "contract"
        description: "Address of the contract"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Erc20Token"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Erc20IndexerApiError"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Erc20IndexerApiError"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Erc20IndexerApiError"
  /v0.1/nft/transactions:
    post:
      tags:
      - "nft-transaction-controller"
      description: "Create pending transaction for NFT"
      operationId: "createNftPendingTransaction"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTransactionRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LogEvent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/mints:
    post:
      tags:
      - "nft-lazy-mint-controller"
      description: "Lazy mint of NFT"
      operationId: "mintNftAsset"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LazyNft"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NftItem"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/activities/search:
    post:
      tags:
      - "nft-activity-controller"
      operationId: "getNftActivities"
      parameters:
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        in: "query"
        description: "The number of items to return"
        required: false
        schema:
          type: "integer"
          format: "int32"
      - name: "sort"
        in: "query"
        description: "Sorting by data update time"
        required: false
        schema:
          $ref: "#/components/schemas/ActivitySort"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NftActivityFilter"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NftActivities"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/ownerships/{ownershipId}:
    get:
      tags:
      - "nft-ownership-controller"
      operationId: "getNftOwnershipById"
      parameters:
      - name: "ownershipId"
        description: "ID of the ownership in format: '$contractAddress:$tokenId:$ownerAddress'"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "showDeleted"
        in: "query"
        description: "Return ownership if it is deleted"
        required: false
        schema:
          type: "boolean"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NftOwnership"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/ownerships/byItem:
    get:
      tags:
      - "nft-ownership-controller"
      operationId: "getNftOwnershipsByItem"
      parameters:
      - name: "contract"
        description: "Address of the contract"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "tokenId"
        description: "Token identifier"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/BigInteger"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          $ref: "#/components/responses/NftOwnershipsPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/ownerships/byOwner:
    get:
      tags:
      - "nft-ownership-controller"
      operationId: "getNftOwnershipsByOwner"
      parameters:
      - name: "owner"
        description: "Address of the owner"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          $ref: "#/components/responses/NftOwnershipsPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/ownerships/all:
    get:
      tags:
      - "nft-ownership-controller"
      operationId: "getNftAllOwnerships"
      parameters:
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int32"
      - name: "showDeleted"
        in: "query"
        description: "Include deleted ownerships"
        required: false
        schema:
          type: "boolean"
      responses:
        "200":
          $ref: "#/components/responses/NftOwnershipsPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/items/{itemId}/meta:
    get:
      tags:
      - "nft-item-controller"
      deprecated: true
      description: "Deprecated and will be removed. Ethereum Protocol API will not\
        \ be responsible for loading NFT metadata. Please migrate to Rarible Multichain\
        \ Protocol (https://docs.rarible.org/) and especially this endpoint - https://api.rarible.org/v0.1/doc#operation/getItemById."
      operationId: "getNftItemMetaById"
      parameters:
      - name: "itemId"
        in: "path"
        description: "Item identifier, has format `${contract}:${tokenId}`"
        required: true
        schema:
          type: "string"
        example: "0x60f80121c31a0d46b5279700f9df786054aa5ee5:717802"
      x-codeSamples:
      - lang: "cURL"
        source: "curl --request GET \\\n--url 'https://ethereum-api.rarible.org/v0.1/nft/items/0x60f80121c31a0d46b5279700f9df786054aa5ee5:717802/meta'\n"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NftItemMeta"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/items/{itemId}/resetMeta:
    delete:
      tags:
      - "nft-item-controller"
      description: "Deletes the NFT item meta by identifier"
      operationId: "resetNftItemMetaById"
      parameters:
      - name: "itemId"
        in: "path"
        description: "Item identifier, has format `${contract}:${tokenId}`"
        required: true
        schema:
          type: "string"
        example: "0x60f80121c31a0d46b5279700f9df786054aa5ee5:717802"
      x-codeSamples:
      - lang: "cURL"
        source: "curl --request DELETE \\\n--url 'https://ethereum-api.rarible.org/v0.1/nft/items/0x60f80121c31a0d46b5279700f9df786054aa5ee5:717802/resetMeta'\n"
      responses:
        "200":
          description: "OK"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/items/{itemId}/lazy:
    get:
      tags:
      - "nft-item-controller"
      description: "Returns the NFT lazy item by identifier"
      operationId: "getNftLazyItemById"
      parameters:
      - name: "itemId"
        in: "path"
        description: "Item identifier, has format `${contract}:${tokenId}`"
        required: true
        schema:
          type: "string"
        example: "0x60f80121c31a0d46b5279700f9df786054aa5ee5:717802"
      x-codeSamples:
      - lang: "cURL"
        source: "curl --request GET \\\n--url 'https://ethereum-api.rarible.org/v0.1/nft/items/0x60f80121c31a0d46b5279700f9df786054aa5ee5:717802/lazy'\n"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LazyNft"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/items/{itemId}/lazy/delete:
    post:
      tags:
      - "nft-item-controller"
      description: "Delete Lazy mint of NFT"
      operationId: "deleteLazyMintNftAsset"
      parameters:
      - name: "itemId"
        in: "path"
        description: "Item identifier, has format `${contract}:${tokenId}`"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BurnLazyNftForm"
        required: true
      responses:
        "204":
          description: "No Content"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/items/{itemId}:
    get:
      tags:
      - "nft-item-controller"
      description: "Returns the NFT item by identifier"
      operationId: "getNftItemById"
      parameters:
      - name: "itemId"
        in: "path"
        description: "Item identifier, has format `${contract}:${tokenId}`"
        required: true
        schema:
          type: "string"
        example: "0x60f80121c31a0d46b5279700f9df786054aa5ee5:717802"
      x-codeSamples:
      - lang: "cURL"
        source: "curl --request GET \\\n--url 'https://ethereum-api.rarible.org/v0.1/nft/items/0x60f80121c31a0d46b5279700f9df786054aa5ee5:717802'\n"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NftItem"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/items/byIds:
    post:
      tags:
      - "nft-item-controller"
      description: "Returns the NFT item by identifier"
      operationId: "getNftItemsByIds"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NftItemIds"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/NftItem"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/items/byOwner:
    get:
      tags:
      - "nft-item-controller"
      description: "Returns the NFT item by owner"
      operationId: "getNftItemsByOwner"
      parameters:
      - name: "owner"
        in: "query"
        description: "Address of the item owner"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
        example: "0x60f80121c31a0d46b5279700f9df786054aa5ee5"
      - name: "continuation"
        in: "query"
        description: "Continuation token from the previous response"
        required: false
        schema:
          type: "string"
        example: "1631782042000_0x85d39cea74b0baba54d7fd0df42dd3e6e39b1625:0x000000000000000000000000000000000000000000000000000000000000209a"
      - name: "size"
        in: "query"
        description: "The number of items to return"
        required: false
        schema:
          type: "integer"
          format: "int32"
        example: 100
      x-codeSamples:
      - lang: "cURL"
        source: "curl --request GET \\\n--url 'https://ethereum-api.rarible.org/v0.1/nft/items/byOwner?owner=0x60f80121c31a0d46b5279700f9df786054aa5ee5&size=10'\n"
      responses:
        "200":
          $ref: "#/components/responses/NftItemsPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/items/byCreator:
    get:
      tags:
      - "nft-item-controller"
      description: "Returns the NFT item by creator"
      operationId: "getNftItemsByCreator"
      parameters:
      - name: "creator"
        in: "query"
        description: "Address of the item creator"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
        example: "0x60f80121c31a0d46b5279700f9df786054aa5ee5"
      - name: "continuation"
        in: "query"
        description: "Continuation token from the previous response"
        required: false
        schema:
          type: "string"
        example: "1631782042000_0x85d39cea74b0baba54d7fd0df42dd3e6e39b1625:0x000000000000000000000000000000000000000000000000000000000000209a"
      - name: "size"
        in: "query"
        description: "The number of items to return"
        required: false
        schema:
          type: "integer"
          format: "int32"
        example: 100
      x-codeSamples:
      - lang: "cURL"
        source: "curl --request GET \\\n--url 'https://ethereum-api.rarible.org/v0.1/nft/items/byCreator?creator=0x60f80121c31a0d46b5279700f9df786054aa5ee5&size=10'\n"
      responses:
        "200":
          $ref: "#/components/responses/NftItemsPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/items/byCollection:
    get:
      tags:
      - "nft-item-controller"
      description: "Returns the NFT items by collection"
      operationId: "getNftItemsByCollection"
      parameters:
      - name: "collection"
        in: "query"
        description: "ID of the NFT collection"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
        example: "0x60f80121c31a0d46b5279700f9df786054aa5ee5"
      - name: "owner"
        in: "query"
        description: "Address of NFT item owner"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
        example: "0x70f80121c31a0d46b5279700f9df786054aa5ee5"
      - name: "continuation"
        in: "query"
        description: "Continuation token from the previous response"
        required: false
        schema:
          type: "string"
        example: "1631782042000_0x85d39cea74b0baba54d7fd0df42dd3e6e39b1625:0x000000000000000000000000000000000000000000000000000000000000209a"
      - name: "size"
        in: "query"
        description: "The number of items to return"
        required: false
        schema:
          type: "integer"
          format: "int32"
        example: 100
      x-codeSamples:
      - lang: "cURL"
        source: "curl --request GET \\\n--url 'https://ethereum-api.rarible.org/v0.1/nft/items/byCollection?collection=0x60f80121c31a0d46b5279700f9df786054aa5ee5&size=10'\n"
      responses:
        "200":
          $ref: "#/components/responses/NftItemsPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/items/all:
    get:
      tags:
      - "nft-item-controller"
      description: "Returns all NFT items"
      operationId: "getNftAllItems"
      parameters:
      - name: "continuation"
        in: "query"
        description: "Continuation token from the previous response"
        required: false
        schema:
          type: "string"
        example: "1631782042000_0x85d39cea74b0baba54d7fd0df42dd3e6e39b1625:0x000000000000000000000000000000000000000000000000000000000000209a"
      - name: "size"
        in: "query"
        description: "The number of items to return"
        required: false
        schema:
          type: "integer"
          format: "int32"
        example: 100
      - name: "showDeleted"
        in: "query"
        description: "Include deleted items"
        required: false
        schema:
          type: "boolean"
      - name: "lastUpdatedFrom"
        description: "Filter condition to return only items that were updated after\
          \ this date (unix format)"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int64"
        example: 1631653245
      - name: "lastUpdatedTo"
        description: "Filter condition to return only items that were updated before\
          \ this date (unix format)"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int64"
        example: 1631782725
      x-codeSamples:
      - lang: "cURL"
        source: "curl --request GET \\\n--url 'https://ethereum-api.rarible.org/v0.1/nft/items/all?size=100&lastUpdatedFrom=1631653245'\n"
      responses:
        "200":
          $ref: "#/components/responses/NftItemsPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/items/{itemId}/royalty:
    get:
      tags:
      - "nft-item-controller"
      description: "Returns item royalty by identifier"
      operationId: "getNftItemRoyaltyById"
      parameters:
      - name: "itemId"
        in: "path"
        description: "Item identifier, has format `contract:tokenId`"
        required: true
        schema:
          type: "string"
        example: "0x60f80121c31a0d46b5279700f9df786054aa5ee5:717802"
      x-codeSamples:
      - lang: "cURL"
        source: "curl --request GET \\\n--url 'https://ethereum-api.rarible.org/v0.1/nft/items/0x60f80121c31a0d46b5279700f9df786054aa5ee5:717802/royalty'\n"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NftItemRoyaltyList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/collections/{collection}/generate_token_id:
    get:
      tags:
      - "nft-collection-controller"
      description: "Returns next available tokenId for minter"
      operationId: "generateNftTokenId"
      parameters:
      - name: "collection"
        in: "path"
        description: "Address of the NFT collection"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
        example: "0x60f80121c31a0d46b5279700f9df786054aa5ee5"
      - name: "minter"
        in: "query"
        description: "Minter address"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
        example: "0x60f80121c31a0d46b5279700f9df786054aa5ee5"
      x-codeSamples:
      - lang: "cURL"
        source: "curl --request GET \\\n--url 'https://ethereum-api.rarible.org/v0.1/nft/collections/0x60f80121c31a0d46b5279700f9df786054aa5ee5/generate_token_id?minter=0x60f80121c31a0d46b5279700f9df786054aa5ee5'\n"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NftTokenId"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/collections/{collection}:
    get:
      tags:
      - "nft-collection-controller"
      description: "Returns collection by address"
      operationId: "getNftCollectionById"
      parameters:
      - name: "collection"
        in: "path"
        description: "Address of the NFT collection"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
        example: "0x60f80121c31a0d46b5279700f9df786054aa5ee5"
      x-codeSamples:
      - lang: "cURL"
        source: "curl --request GET \\\n--url 'https://ethereum-api.rarible.org/v0.1/nft/collections/0x60f80121c31a0d46b5279700f9df786054aa5ee5'\n"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NftCollection"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/collections/{collection}/stats:
    get:
      tags:
      - "nft-collection-controller"
      description: "Returns collection by address"
      operationId: "getNftCollectionStats"
      deprecated: true
      parameters:
      - name: "collection"
        in: "path"
        description: "Address of the NFT collection"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
        example: "0x60f80121c31a0d46b5279700f9df786054aa5ee5"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NftCollectionStats"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/collections/{collection}/resetMeta:
    delete:
      tags:
      - "nft-collection-controller"
      description: "Deletes the NFT collection meta by identifier"
      operationId: "resetNftCollectionMetaById"
      parameters:
      - name: "collection"
        in: "path"
        description: "Address of the NFT collection"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
        example: "0x60f80121c31a0d46b5279700f9df786054aa5ee5"
      x-codeSamples:
      - lang: "cURL"
        source: "curl --request DELETE \\\n--url 'https://ethereum-api.rarible.org/v0.1/nft/collections/0x60f80121c31a0d46b5279700f9df786054aa5ee5/resetMeta'\n"
      responses:
        "200":
          description: "OK"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/collections/byOwner:
    get:
      tags:
      - "nft-collection-controller"
      description: "Returns collection by owner"
      operationId: "searchNftCollectionsByOwner"
      parameters:
      - name: "owner"
        in: "query"
        description: "Address of the collection owner"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
        example: "0x60f80121c31a0d46b5279700f9df786054aa5ee5"
      - name: "continuation"
        in: "query"
        description: "Continuation token from the previous response"
        required: false
        schema:
          type: "string"
        example: "1631782042000_0x85d39cea74b0baba54d7fd0df42dd3e6e39b1625:0x000000000000000000000000000000000000000000000000000000000000209a"
      - name: "size"
        in: "query"
        description: "The number of collections to return"
        required: false
        schema:
          type: "integer"
          format: "int32"
        example: 100
      x-codeSamples:
      - lang: "cURL"
        source: "curl --request GET \\\n--url 'https://ethereum-api.rarible.org/v0.1/nft/collections/byOwner?owner=0x488728a8a3e51f7c34410164c4469c71fce1084a'\n"
      responses:
        "200":
          $ref: "#/components/responses/NftCollectionsPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft/collections/all:
    get:
      tags:
      - "nft-collection-controller"
      description: "Returns all NFT collections"
      operationId: "searchNftAllCollections"
      parameters:
      - name: "continuation"
        in: "query"
        description: "Continuation token from the previous response"
        required: false
        schema:
          type: "string"
        example: "0x9f5791277dfa7884620c688687351fc5423ec935"
      - name: "size"
        in: "query"
        description: "The number of collections to return"
        required: false
        schema:
          type: "integer"
          format: "int32"
        example: 100
      x-codeSamples:
      - lang: "cURL"
        source: "curl --request GET \\\n--url 'https://ethereum-api.rarible.org/v0.1/nft/collections/all?size=100'\n"
      responses:
        "200":
          $ref: "#/components/responses/NftCollectionsPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/signature/validate:
    post:
      tags:
      - "order-signature-controller"
      operationId: "validate"
      description: "Validation of the order signature"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EthereumSignatureValidationForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "boolean"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/encoder/order:
    post:
      tags:
      - "order-encode-controller"
      operationId: "encodeOrder"
      deprecated: true
      description: "Deprecated. Use Rarible Protocol Ethereum SDK https://github.com/rarible/ethereum-sdk/tree/master"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncodedOrder"
        "400":
          $ref: "#/components/responses/OrderDataApiError"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/encoder/data:
    post:
      deprecated: true
      description: "This method should not be used and will be removed soon"
      tags:
      - "order-encode-controller"
      operationId: "encodeOrderData"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderData"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncodedOrderData"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/encoder/assetType:
    post:
      deprecated: true
      description: "This method should not be used and will be removed soon"
      tags:
      - "order-encode-controller"
      operationId: "encodeOrderAssetType"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetType"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncodedOrderData"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders:
    post:
      tags:
      - "order-controller"
      description: "Create or update order"
      operationId: "upsertOrder"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderForm"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          $ref: "#/components/responses/OrderUpdateApiError"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders/{hash}/prepareTx:
    post:
      tags:
      - "order-controller"
      deprecated: true
      description: "Prepare order transaction. Deprecated. Use Rarible Protocol Ethereum\
        \ SDK https://github.com/rarible/ethereum-sdk/tree/master"
      operationId: "prepareOrderTransaction"
      parameters:
      - name: "hash"
        description: "Hash of the order"
        in: "path"
        required: true
        schema:
          type: "string"
        example: "0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PrepareOrderTxForm"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrepareOrderTxResponse"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders/{hash}/prepareCancelTx:
    post:
      tags:
      - "order-controller"
      description: "Prepare order for cancel transaction"
      operationId: "prepareOrderCancelTransaction"
      parameters:
      - name: "hash"
        description: "Hash of the order"
        in: "path"
        required: true
        schema:
          type: "string"
        example: "0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0"
      x-codeSamples:
      - lang: "cURL"
        source: "curl --request POST \\\n--url 'https://ethereum-api.rarible.org/v0.1/order/orders/0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0/prepareCancelTx'\n"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreparedOrderTx"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders/{hash}:
    get:
      tags:
      - "order-controller"
      description: "Returns the order by order hash"
      operationId: "getOrderByHash"
      parameters:
      - name: "hash"
        description: "Hash of the order"
        in: "path"
        required: true
        schema:
          type: "string"
        example: "0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0"
      x-codeSamples:
      - lang: "cURL"
        source: "curl --request GET \\\n--url 'https://ethereum-api.rarible.org/v0.1/order/orders/0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0'\n"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders/{hash}/updateMakeStock:
    get:
      tags:
      - "order-controller"
      description: "Update stock of the order by order hash"
      operationId: "updateOrderMakeStock"
      parameters:
      - name: "hash"
        description: "Hash of the order"
        in: "path"
        required: true
        schema:
          type: "string"
        example: "0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0"
      x-codeSamples:
      - lang: "cURL"
        source: "curl --request GET \\\n--url 'https://ethereum-api.rarible.org/v0.1/order/orders/0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0/updateMakeStock'\n"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders/buyerFeeSignature:
    post:
      tags:
      - "order-controller"
      description: "Buyer's signature for a fee"
      operationId: "buyerFeeSignature"
      parameters:
      - name: "fee"
        description: "Fee value for operation"
        in: "query"
        required: true
        schema:
          type: "integer"
          minimum: 0
          format: "int32"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderForm"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Binary"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders/all:
    get:
      deprecated: true
      tags:
      - "order-controller"
      description: "Returns all orders by specified parameters"
      operationId: "getOrdersAll"
      parameters:
      - name: "origin"
        description: "Address of the consumer to receive the commission for order"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "platform"
        description: "The platform where the order was created"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Platform"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of orders to return"
        in: "query"
        required: false
        schema:
          minimum: 1
          type: "integer"
          format: "int32"
      responses:
        "200":
          $ref: "#/components/responses/OrderPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders/byIds:
    post:
      tags:
      - "order-controller"
      description: "Returns all orders by order hash"
      operationId: "getOrdersByIds"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderIds"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Order"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders/sell/byMaker:
    get:
      deprecated: true
      tags:
      - "order-controller"
      description: "Returns all orders for sale by maker"
      operationId: "getSellOrdersByMaker"
      parameters:
      - name: "maker"
        description: "The maker of the order"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "origin"
        description: "Address of the consumer to receive the commission for order"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "platform"
        description: "The platform where the order was created"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Platform"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of orders to return"
        in: "query"
        required: false
        schema:
          minimum: 1
          type: "integer"
          format: "int32"
      responses:
        "200":
          $ref: "#/components/responses/OrderPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders/sell/byMakerAndByStatus:
    get:
      tags:
      - "order-controller"
      operationId: "getSellOrdersByMakerAndByStatus"
      description: "Returns all orders for sale by maker and order status"
      parameters:
      - name: "maker"
        description: "The maker of the order"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "origin"
        description: "Address of the consumer to receive the commission for order"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "platform"
        description: "The platform where the order was created"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Platform"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          minimum: 1
          type: "integer"
          format: "int32"
      - name: "status"
        description: "The order status"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/OrderStatus"
      responses:
        "200":
          $ref: "#/components/responses/OrderPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders/sell/byItem:
    get:
      deprecated: true
      tags:
      - "order-controller"
      description: "Returns all orders for sale by item"
      operationId: "getSellOrdersByItem"
      parameters:
      - name: "contract"
        description: "Address of the contract"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "tokenId"
        description: "Token identifier"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/BigInteger"
      - name: "maker"
        description: "The maker of the order"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "origin"
        description: "Address of the consumer to receive the commission for order"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "platform"
        description: "The platform where the order was created"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Platform"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of orders to return"
        in: "query"
        required: false
        schema:
          minimum: 1
          type: "integer"
          format: "int32"
      responses:
        "200":
          $ref: "#/components/responses/OrderPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders/sell/byItemAndByStatus:
    get:
      tags:
      - "order-controller"
      operationId: "getSellOrdersByItemAndByStatus"
      description: "Returns all orders for sale by item and order status"
      parameters:
      - name: "contract"
        description: "Address of the contract"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "tokenId"
        description: "Token identifier"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/BigInteger"
      - name: "maker"
        description: "The maker of the order"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "origin"
        description: "Address of the consumer to receive the commission for order"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "platform"
        description: "The platform where the order was created"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Platform"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          minimum: 1
          type: "integer"
          format: "int32"
      - name: "status"
        description: "The order status"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/OrderStatus"
      - name: "currencyId"
        in: "query"
        required: false
        description: "This parameter will be required in future releases."
        schema:
          $ref: "#/components/schemas/Address"
      responses:
        "200":
          $ref: "#/components/responses/OrderPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders/currencies/bySellOrdersOfItem:
    get:
      tags:
      - "order-controller"
      operationId: "getCurrenciesBySellOrdersOfItem"
      description: "Returns currencies taken as payment in all sell orders of the\
        \ item"
      parameters:
      - name: "contract"
        description: "Address of the contract"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "tokenId"
        description: "Token identifier"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/BigInteger"
      responses:
        "200":
          $ref: "#/components/responses/OrderCurrenciesPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders/currencies/byBidOrdersOfItem:
    get:
      tags:
      - "order-controller"
      operationId: "getCurrenciesByBidOrdersOfItem"
      description: "Returns currencies made as payment in all bid orders of the item"
      parameters:
      - name: "contract"
        description: "Address of the contract"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "tokenId"
        description: "Token identifier"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/BigInteger"
      responses:
        "200":
          $ref: "#/components/responses/OrderCurrenciesPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders/sell/byCollection:
    get:
      deprecated: true
      tags:
      - "order-controller"
      description: "Returns all orders for sale by collection"
      operationId: "getSellOrdersByCollection"
      parameters:
      - name: "collection"
        description: "Address of the NFT collection"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "origin"
        description: "Address of the consumer to receive the commission for order"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "platform"
        description: "The platform where the order was created"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Platform"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of orders to return"
        in: "query"
        required: false
        schema:
          minimum: 1
          type: "integer"
          format: "int32"
      responses:
        "200":
          $ref: "#/components/responses/OrderPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders/sell/byCollectionAndByStatus:
    get:
      tags:
      - "order-controller"
      operationId: "getSellOrdersByCollectionAndByStatus"
      description: "Returns all orders for sale by collection and order status"
      parameters:
      - name: "collection"
        description: "Address of the NFT collection"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "origin"
        description: "Address of the consumer to receive the commission for order"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "platform"
        description: "The platform where the order was created"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Platform"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          minimum: 1
          type: "integer"
          format: "int32"
      - name: "status"
        description: "The order status"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/OrderStatus"
      responses:
        "200":
          $ref: "#/components/responses/OrderPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders/sell:
    get:
      deprecated: true
      tags:
      - "order-controller"
      description: "Returns all orders for sale by specified parameters"
      operationId: "getSellOrders"
      parameters:
      - name: "origin"
        description: "Address of the consumer to receive the commission for order"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "platform"
        description: "The platform where the order was created"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Platform"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of orders to return"
        in: "query"
        required: false
        schema:
          minimum: 1
          type: "integer"
          format: "int32"
      responses:
        "200":
          $ref: "#/components/responses/OrderPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders/sellByStatus:
    get:
      tags:
      - "order-controller"
      operationId: "getSellOrdersByStatus"
      description: "Returns all orders for sale by order status"
      parameters:
      - name: "origin"
        description: "Address of the consumer to receive the commission for order"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "platform"
        description: "The platform where the order was created"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Platform"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          minimum: 1
          type: "integer"
          format: "int32"
      - name: "status"
        description: "The order status"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/OrderStatus"
      - name: "sort"
        description: "Sorting by last update"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/OrderSort"
      responses:
        "200":
          $ref: "#/components/responses/OrderPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders/bids/byMaker:
    get:
      deprecated: true
      tags:
      - "order-controller"
      description: "Returns all order bids by maker"
      operationId: "getOrderBidsByMaker"
      parameters:
      - name: "maker"
        description: "The maker of the order"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "origin"
        description: "Address of the consumer to receive the commission for order"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "platform"
        description: "The platform where the order was created"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Platform"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of orders to return"
        in: "query"
        required: false
        schema:
          minimum: 1
          type: "integer"
          format: "int32"
      responses:
        "200":
          $ref: "#/components/responses/OrderPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders/bids/byMakerAndByStatus:
    get:
      tags:
      - "order-controller"
      operationId: "getOrderBidsByMakerAndByStatus"
      description: "Returns all order bids by maker and order status"
      parameters:
      - name: "maker"
        description: "The maker of the order"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "origin"
        description: "Address of the consumer to receive the commission for order"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "platform"
        description: "The platform where the order was created"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Platform"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of orders to return"
        in: "query"
        required: false
        schema:
          minimum: 1
          type: "integer"
          format: "int32"
      - name: "status"
        description: "The order status"
        in: "query"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/OrderStatus"
      - name: "startDate"
        description: "Lower time border of data (unix format)"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int64"
      - name: "endDate"
        description: "Upper time border of data (unix format)"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          $ref: "#/components/responses/OrderPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders/bids/byItem:
    get:
      deprecated: true
      tags:
      - "order-controller"
      description: "Returns all order bids by item"
      operationId: "getOrderBidsByItem"
      parameters:
      - name: "contract"
        description: "Address of the contract"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "tokenId"
        description: "Token identifier"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/BigInteger"
      - name: "maker"
        description: "The maker of the order"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/Address"
      - name: "origin"
        description: "Address of the consumer to receive the commission for order"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "platform"
        description: "The platform where the order was created"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Platform"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of orders to return"
        in: "query"
        required: false
        schema:
          minimum: 1
          type: "integer"
          format: "int32"
      responses:
        "200":
          $ref: "#/components/responses/OrderPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders/bids/byItemAndByStatus:
    get:
      tags:
      - "order-controller"
      operationId: "getOrderBidsByItemAndByStatus"
      description: "Returns all order bids by item and order status"
      parameters:
      - name: "contract"
        description: "Address of the contract"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "tokenId"
        description: "Token identifier"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/BigInteger"
      - name: "maker"
        description: "The maker of the order"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/Address"
      - name: "origin"
        description: "Address of the consumer to receive the commission for order"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "platform"
        description: "The platform where the order was created"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Platform"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of orders to return"
        in: "query"
        required: false
        schema:
          minimum: 1
          type: "integer"
          format: "int32"
      - name: "status"
        description: "The order status"
        in: "query"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/OrderStatus"
      - name: "currencyId"
        in: "query"
        required: false
        description: "This parameter will be required in future releases."
        schema:
          $ref: "#/components/schemas/Address"
      - name: "startDate"
        description: "Lower time border of data (unix format)"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int64"
      - name: "endDate"
        description: "Upper time border of data (unix format)"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          $ref: "#/components/responses/OrderPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/orders/all/byStatus:
    get:
      tags:
      - "order-controller"
      description: "Returns all orders with status sorting"
      operationId: "getOrdersAllByStatus"
      parameters:
      - name: "sort"
        description: "Sorting by last update"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/OrderSort"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of orders to return"
        in: "query"
        required: false
        schema:
          minimum: 1
          type: "integer"
          format: "int32"
      - name: "status"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/OrderStatus"
      responses:
        "200":
          $ref: "#/components/responses/OrderPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/bids/byItem:
    get:
      deprecated: true
      tags:
      - "order-bid-controller"
      operationId: "getBidsByItem"
      parameters:
      - name: "contract"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "tokenId"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/BigInteger"
      - name: "status"
        in: "query"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/OrderBidStatus"
      - name: "maker"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/Address"
      - name: "origin"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "platform"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Platform"
      - name: "startDate"
        in: "query"
        required: false
        schema:
          type: "string"
          format: "date-time"
      - name: "endDate"
        in: "query"
        required: false
        schema:
          type: "string"
          format: "date-time"
      - name: "continuation"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        in: "query"
        required: false
        schema:
          minimum: 1
          type: "integer"
          format: "int32"
      responses:
        "200":
          $ref: "#/components/responses/OrderBidsPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/transactions:
    post:
      tags:
      - "order-transaction-controller"
      description: "Create pending transaction for order"
      operationId: "createOrderPendingTransaction"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTransactionRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LogEvent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/activities/search:
    post:
      tags:
      - "order-activity-controller"
      operationId: "getOrderActivities"
      description: "Returns event history with order"
      parameters:
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        in: "query"
        description: "The number of items to return"
        required: false
        schema:
          type: "integer"
          format: "int32"
      - name: "sort"
        description: "Sorting by data update time"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/ActivitySort"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderActivityFilter"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderActivities"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/auctions/activities/search:
    post:
      tags:
      - "auction-activity-controller"
      operationId: "getAuctionActivities"
      description: "Returns event history with auction"
      parameters:
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        in: "query"
        description: "The number of items to return"
        required: false
        schema:
          type: "integer"
          format: "int32"
      - name: "sort"
        description: "Sorting by data update time"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/ActivitySort"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuctionActivityFilter"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuctionActivities"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/aggregations/nftSellByMaker:
    get:
      tags:
      - "order-aggregation-controller"
      operationId: "aggregateNftSellByMaker"
      description: "Aggregate NFT sell order by maker"
      parameters:
      - name: "startDate"
        description: "Lower time border of data (unix format)"
        in: "query"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "endDate"
        description: "Upper time border of data (unix format)"
        in: "query"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int64"
      - name: "source"
        description: "The platform where the order was created"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Platform"
      responses:
        "200":
          $ref: "#/components/responses/AggregationDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/aggregations/nftPurchaseByTaker:
    get:
      tags:
      - "order-aggregation-controller"
      operationId: "aggregateNftPurchaseByTaker"
      description: "Aggregate NFT purchase by taker"
      parameters:
      - name: "startDate"
        description: "Lower time border of data (unix format)"
        in: "query"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "endDate"
        description: "Upper time border of data (unix format)"
        in: "query"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int64"
      - name: "source"
        description: "The platform where the order was created"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Platform"
      responses:
        "200":
          $ref: "#/components/responses/AggregationDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/aggregations/nftPurchaseByCollection:
    get:
      tags:
      - "order-aggregation-controller"
      operationId: "aggregateNftPurchaseByCollection"
      description: "Aggregate NFT purchase by collection"
      parameters:
      - name: "startDate"
        description: "Lower time border of data (unix format)"
        in: "query"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "endDate"
        description: "Upper time border of data (unix format)"
        in: "query"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int64"
      - name: "source"
        description: "The platform where the order was created"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Platform"
      responses:
        "200":
          $ref: "#/components/responses/AggregationDataResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/aggregations/aggregateNftCollectionStats/{collection}:
    get:
      tags:
      - "order-aggregation-controller"
      operationId: "aggregateNftCollectionStats"
      deprecated: true
      parameters:
      - name: "collection"
        in: "path"
        description: "Address of the NFT collection"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
        example: "0x60f80121c31a0d46b5279700f9df786054aa5ee5"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderCollectionStats"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/auctions/{hash}:
    get:
      tags:
      - "auction-controller"
      description: "Returns the auction by hash"
      operationId: "getAuctionByHash"
      parameters:
      - name: "hash"
        description: "Hash of the auction"
        in: "path"
        required: true
        schema:
          type: "string"
        example: "0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0"
      x-codeSamples:
      - lang: "cURL"
        source: "curl --request GET \\\n--url 'https://ethereum-api.rarible.org/v0.1/auction/auctions/0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0'\n"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auction"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/auctions/{hash}/bids:
    get:
      tags:
      - "auction-controller"
      description: "Returns auction bids by the auction hash"
      operationId: "getAuctionBidsByHash"
      parameters:
      - name: "hash"
        description: "Hash of auction"
        in: "path"
        required: true
        schema:
          type: "string"
        example: "0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of auction bids to return"
        in: "query"
        required: false
        schema:
          minimum: 1
          type: "integer"
          format: "int32"
      x-codeSamples:
      - lang: "cURL"
        source: "curl --request GET \\\n--url 'https://ethereum-api.rarible.org/v0.1/auction/auctions/0x38a2616dcff042fa157b2d5389171fe6f1d92c9dc3c85b7465a7e60948bf3ba0/bids'\n"
      responses:
        "200":
          $ref: "#/components/responses/AuctionBidPage"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/auctions/all:
    get:
      deprecated: true
      tags:
      - "auction-controller"
      description: "Returns all auctions by specified parameters"
      operationId: "getAuctionsAll"
      parameters:
      - name: "sort"
        description: "Sorting by target criteria"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/AuctionSort"
      - name: "status"
        description: "The auction status"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/AuctionStatus"
      - name: "origin"
        description: "Address of the consumer to receive the commission for auction"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "platform"
        description: "The platform where the auction was created"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Platform"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of auctions to return"
        in: "query"
        required: false
        schema:
          minimum: 1
          type: "integer"
          format: "int32"
      responses:
        "200":
          $ref: "#/components/responses/AuctionPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/auctions/byIds:
    post:
      tags:
      - "auction-controller"
      description: "Returns all auctions by auction hash"
      operationId: "getAuctionsByIds"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuctionIds"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Auction"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/auctions/bySeller:
    get:
      tags:
      - "auction-controller"
      operationId: "getAuctionsBySeller"
      description: "Returns all auctions by seller"
      parameters:
      - name: "seller"
        description: "The seller of the auction"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "status"
        description: "The auction status"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/AuctionStatus"
      - name: "origin"
        description: "Address of the consumer to receive the commission for auction"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "platform"
        description: "The platform where the auction was created"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Platform"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          minimum: 1
          type: "integer"
          format: "int32"
      responses:
        "200":
          $ref: "#/components/responses/AuctionPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/auctions/byItem:
    get:
      tags:
      - "auction-controller"
      operationId: "getAuctionsByItem"
      description: "Returns all auctions by item"
      parameters:
      - name: "contract"
        description: "Address of the contract"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "tokenId"
        description: "Token identifier"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/BigInteger"
      - name: "seller"
        description: "The maker of the order"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "sort"
        description: "Sorting by target criteria"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/AuctionSort"
      - name: "origin"
        description: "Address of the consumer to receive the commission for order"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "status"
        description: "The auction status"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/AuctionStatus"
      - name: "currencyId"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "platform"
        description: "The platform where the order was created"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Platform"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          minimum: 1
          type: "integer"
          format: "int32"
      responses:
        "200":
          $ref: "#/components/responses/AuctionPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/order/auctions/byCollection:
    get:
      tags:
      - "auction-controller"
      operationId: "getAuctionsByCollection"
      description: "Returns all auctions by collection"
      parameters:
      - name: "contract"
        description: "Address of the NFT collection"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "seller"
        description: "The maker of the order"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "origin"
        description: "Address of the consumer to receive the commission for auction"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Address"
      - name: "status"
        description: "The order status"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/AuctionStatus"
      - name: "platform"
        description: "The platform where the auction was created"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/Platform"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          minimum: 1
          type: "integer"
          format: "int32"
      responses:
        "200":
          $ref: "#/components/responses/AuctionPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft-order/ownerships/{ownershipId}:
    get:
      tags:
      - "nft-order-ownership-controller"
      operationId: "getNftOrderOwnershipById"
      description: "Returns order ownership by ownership address"
      deprecated: true
      parameters:
      - name: "ownershipId"
        description: "ID of the ownership in format: '$contractAddress:$tokenId:$ownerAddress'"
        in: "path"
        required: true
        schema:
          type: "string"
        example: "0xf6793da657495ffeff9ee6350824910abc21356c:102351784535720381921822338631028197690494847592883259167987535571146174431591:0xe2490e9f5657cfefb89c12798167ecd194c8e956"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NftOrderOwnership"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft-order/ownerships/byItem:
    get:
      tags:
      - "nft-order-ownership-controller"
      operationId: "getNftOrderOwnershipsByItem"
      description: "Returns order ownership by item address"
      deprecated: true
      parameters:
      - name: "contract"
        description: "Address of the contract"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "tokenId"
        description: "Token identifier"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/BigInteger"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          $ref: "#/components/responses/NftOrderOwnershipsPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft-order/ownerships/all:
    get:
      tags:
      - "nft-order-ownership-controller"
      operationId: "getNftOrderAllOwnerships"
      description: "Returns all orders with ownerships"
      deprecated: true
      parameters:
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          $ref: "#/components/responses/NftOrderOwnershipsPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft-order/mints:
    post:
      tags:
      - "nft-order-lazy-mint-controller"
      description: "Lazy mint of NFT"
      deprecated: true
      operationId: "mintNftOrderAsset"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LazyNft"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NftOrderItem"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft-order/items/{itemId}:
    get:
      tags:
      - "nft-order-item-controller"
      operationId: "getNftOrderItemById"
      description: "Returns order item by item identifier"
      deprecated: true
      parameters:
      - name: "itemId"
        description: "Item identifier, has format `${contract}:${tokenId}`"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NftOrderItem"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft-order/items/{itemId}/meta:
    get:
      tags:
      - "nft-order-item-controller"
      operationId: "getNftOrderItemMetaById"
      description: "Returns order item meta by item identifier"
      deprecated: true
      parameters:
      - name: "itemId"
        description: "Item identifier, has format `${contract}:${tokenId}`"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NftItemMeta"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft-order/items/{itemId}/lazy:
    get:
      tags:
      - "nft-order-item-controller"
      operationId: "getNftOrderLazyItemById"
      description: "Returns lazy order item by item identifier"
      deprecated: true
      parameters:
      - name: "itemId"
        description: "Item identifier, has format `${contract}:${tokenId}`"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LazyNft"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft-order/items/byOwner:
    get:
      tags:
      - "nft-order-item-controller"
      operationId: "getNftOrderItemsByOwner"
      description: "Returns order items by owner"
      deprecated: true
      parameters:
      - name: "owner"
        description: "Address of the item owner"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          $ref: "#/components/responses/NftOrderItemsPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft-order/items/byCreator:
    get:
      tags:
      - "nft-order-item-controller"
      operationId: "getNftOrderItemsByCreator"
      description: "Returns order items by creator"
      deprecated: true
      parameters:
      - name: "creator"
        description: "Address of the item creator"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          $ref: "#/components/responses/NftOrderItemsPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft-order/items/byCollection:
    get:
      tags:
      - "nft-order-item-controller"
      operationId: "getNftOrderItemsByCollection"
      description: "Returns order items by collection address"
      deprecated: true
      parameters:
      - name: "collection"
        description: "Address of the NFT collection"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          $ref: "#/components/responses/NftOrderItemsPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft-order/items/all:
    get:
      tags:
      - "nft-order-item-controller"
      operationId: "getNftOrderAllItems"
      description: "Returns all orders"
      deprecated: true
      parameters:
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int32"
      - name: "showDeleted"
        description: "Include deleted items"
        in: "query"
        required: false
        schema:
          type: "boolean"
      - name: "lastUpdatedFrom"
        description: "Filter condition to return only items that were updated after\
          \ this date (unix format)"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int64"
      - name: "lastUpdatedTo"
        description: "Filter condition to return only items that were updated before\
          \ this date (unix format)"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          $ref: "#/components/responses/NftOrderItemsPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft-order/activities/byUser:
    get:
      tags:
      - "nft-order-activity-controller"
      operationId: "getNftOrderActivitiesByUser"
      description: "Returns orders event history by user"
      deprecated: true
      parameters:
      - name: "type"
        description: "Order activity type"
        in: "query"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/ActivityFilterByUserType"
      - name: "user"
        description: "Address of the user"
        in: "query"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/Address"
      - name: "from"
        description: "Lower time border of data (unix format)"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int64"
      - name: "to"
        description: "Upper time border of data (unix format)"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int64"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int32"
      - name: "sort"
        description: "Sorting by data update time"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/ActivitySort"
      responses:
        "200":
          $ref: "#/components/responses/NftOrderActivityPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft-order/activities/byItem:
    get:
      tags:
      - "nft-order-activity-controller"
      operationId: "getNftOrderActivitiesByItem"
      description: "Returns orders event history by item"
      deprecated: true
      parameters:
      - name: "type"
        description: "Order activity type"
        in: "query"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/ActivityFilterByItemType"
      - name: "contract"
        description: "Address of the contract"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "tokenId"
        description: "Token identifier"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/BigInteger"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int32"
      - name: "sort"
        description: "Sorting by data update time"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/ActivitySort"
      responses:
        "200":
          $ref: "#/components/responses/NftOrderActivityPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft-order/activities/byCollection:
    get:
      tags:
      - "nft-order-activity-controller"
      operationId: "getNftOrderActivitiesByCollection"
      description: "Returns orders event history by collection"
      deprecated: true
      parameters:
      - name: "type"
        description: "Order activity type"
        in: "query"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/ActivityFilterByCollectionType"
      - name: "collection"
        in: "query"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int32"
      - name: "sort"
        description: "Sorting by data update time"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/ActivitySort"
      responses:
        "200":
          $ref: "#/components/responses/NftOrderActivityPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft-order/activities/all:
    get:
      tags:
      - "nft-order-activity-controller"
      operationId: "getNftOrderAllActivities"
      description: "Returns all orders event history"
      deprecated: true
      parameters:
      - name: "type"
        description: "Order activity type"
        in: "query"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/ActivityFilterAllType"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int32"
      - name: "sort"
        description: "Sorting by data update time"
        in: "query"
        required: false
        schema:
          $ref: "#/components/schemas/ActivitySort"
      responses:
        "200":
          $ref: "#/components/responses/NftOrderActivityPage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft-order/collections/{collection}/generate_token_id:
    get:
      tags:
      - "nft-order-collection-controller"
      description: "Returns next available tokenId for minter"
      deprecated: true
      operationId: "generateNftOrderTokenId"
      parameters:
      - name: "collection"
        in: "path"
        description: "Address of the NFT collection"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "minter"
        in: "query"
        description: "Minter address"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NftTokenId"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft-order/collections/{collection}:
    get:
      tags:
      - "nft-order-collection-controller"
      description: "Returns collection by address"
      deprecated: true
      operationId: "getNftOrderCollectionById"
      parameters:
      - name: "collection"
        description: "Address of the NFT collection"
        in: "path"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NftCollection"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft-order/collections/byOwner:
    get:
      tags:
      - "nft-order-collection-controller"
      description: "Returns all collections by owner"
      deprecated: true
      operationId: "searchNftOrderCollectionsByOwner"
      parameters:
      - name: "owner"
        in: "query"
        description: "Address of the collection owner"
        required: true
        schema:
          $ref: "#/components/schemas/Address"
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NftCollections"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v0.1/nft-order/collections/all:
    get:
      tags:
      - "nft-order-collection-controller"
      description: "Returns all collections"
      deprecated: true
      operationId: "searchNftOrderAllCollections"
      parameters:
      - name: "continuation"
        description: "Continuation token from the previous response"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "size"
        description: "The number of items to return"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NftCollections"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
components:
  schemas:
    GatewayApiError:
      required:
      - "code"
      - "message"
      - "status"
      type: "object"
      properties:
        status:
          type: "integer"
          format: "int32"
        code:
          type: "string"
          enum:
          - "UNKNOWN"
          - "VALIDATION"
        message:
          type: "string"
    EthBalance:
      type: "object"
      required:
      - "owner"
      - "balance"
      - "decimalBalance"
      properties:
        owner:
          $ref: "#/components/schemas/Address"
        balance:
          $ref: "#/components/schemas/BigInteger"
        decimalBalance:
          $ref: "#/components/schemas/BigDecimal"
    Erc20Balance:
      type: "object"
      required:
      - "contract"
      - "owner"
      - "balance"
      properties:
        contract:
          $ref: "#/components/schemas/Address"
        owner:
          $ref: "#/components/schemas/Address"
        balance:
          $ref: "#/components/schemas/BigInteger"
        createdAt:
          type: "string"
          format: "date-time"
        lastUpdatedAt:
          type: "string"
          format: "date-time"
    Erc20DecimalBalance:
      type: "object"
      required:
      - "contract"
      - "owner"
      - "balance"
      - "decimalBalance"
      properties:
        contract:
          $ref: "#/components/schemas/Address"
        owner:
          $ref: "#/components/schemas/Address"
        balance:
          $ref: "#/components/schemas/BigInteger"
        decimalBalance:
          $ref: "#/components/schemas/BigDecimal"
        createdAt:
          type: "string"
          format: "date-time"
        lastUpdatedAt:
          type: "string"
          format: "date-time"
    Erc20Token:
      type: "object"
      required:
      - "id"
      properties:
        id:
          $ref: "#/components/schemas/Address"
        name:
          type: "string"
        symbol:
          type: "string"
    Erc20IndexerApiError:
      type: "object"
      required:
      - "status"
      - "code"
      - "message"
      properties:
        status:
          type: "integer"
          description: "HTTP status code"
        code:
          type: "string"
          description: "Error type"
          enum:
          - "UNKNOWN"
          - "VALIDATION"
          - "TOKEN_NOT_FOUND"
          - "BALANCE_NOT_FOUND"
        message:
          type: "string"
          description: "Error message"
    Erc20BalanceEvent:
      type: "object"
      required:
      - "eventId"
      - "balanceId"
      properties:
        eventId:
          type: "string"
        balanceId:
          type: "string"
        createdAt:
          type: "string"
          format: "date-time"
        lastUpdatedAt:
          type: "string"
          format: "date-time"
      oneOf:
      - $ref: "#/components/schemas/Erc20BalanceUpdateEvent"
    Erc20BalanceUpdateEvent:
      type: "object"
      required:
      - "balance"
      properties:
        type:
          type: "string"
          enum:
          - "UPDATE"
        balance:
          $ref: "#/components/schemas/Erc20Balance"
    Address:
      type: "string"
      example: "0x60f80121c31a0d46b5279700f9df786054aa5ee5"
    BigInteger:
      type: "string"
      example: 717802
    BigDecimal:
      type: "string"
      example: 717802.342336
    NftActivities:
      required:
      - "items"
      type: "object"
      properties:
        continuation:
          type: "string"
          description: "Continuation token to paginate items search result"
        items:
          type: "array"
          description: "List of found activities"
          items:
            $ref: "#/components/schemas/NftActivity"
    NftCollection:
      required:
      - "features"
      - "id"
      - "name"
      - "type"
      - "supportsLazyMint"
      type: "object"
      properties:
        id:
          $ref: "#/components/schemas/Address"
        type:
          type: "string"
          description: "Collection type"
          enum:
          - "ERC721"
          - "ERC1155"
          - "CRYPTO_PUNKS"
        owner:
          $ref: "#/components/schemas/Address"
        name:
          type: "string"
          description: "Collection name"
        symbol:
          type: "string"
          description: "Collection symbol"
        features:
          type: "array"
          description: "Set of supported features for this collection"
          items:
            type: "string"
            enum:
            - "APPROVE_FOR_ALL"
            - "SET_URI_PREFIX"
            - "BURN"
            - "MINT_WITH_ADDRESS"
            - "SECONDARY_SALE_FEES"
            - "MINT_AND_TRANSFER"
        supportsLazyMint:
          type: "boolean"
          description: "Does the collection support lazy mint or not"
        minters:
          type: "array"
          description: "List of addresses that can mint items in this collection"
          items:
            $ref: "#/components/schemas/Address"
        meta:
          $ref: "#/components/schemas/NftCollectionMeta"
    NftCollectionStats:
      type: "object"
      properties:
        token:
          $ref: "#/components/schemas/Address"
        totalItemSupply:
          $ref: "#/components/schemas/BigInteger"
        totalOwnerCount:
          type: "integer"
        lastUpdatedAt:
          type: "string"
          format: "date-time"
      required:
      - "token"
    NftCollections:
      required:
      - "total"
      - "collections"
      type: "object"
      properties:
        total:
          type: "integer"
          description: "Number of collections were found by request"
          format: "int64"
        continuation:
          type: "string"
          description: "Continuation token to paginate items search result"
        collections:
          type: "array"
          description: "List of found collections"
          items:
            $ref: "#/components/schemas/NftCollection"
    NftCollectionEvent:
      required:
      - "eventId"
      - "id"
      properties:
        eventId:
          type: "string"
        id:
          $ref: "#/components/schemas/Address"
      oneOf:
      - $ref: "#/components/schemas/NftCollectionUpdateEvent"
    NftCollectionUpdateEvent:
      type: "object"
      required:
      - "collection"
      properties:
        type:
          type: "string"
          enum:
          - "UPDATE"
        collection:
          $ref: "#/components/schemas/NftCollection"
    NftSignature:
      required:
      - "r"
      - "s"
      - "v"
      type: "object"
      properties:
        v:
          type: "integer"
        r:
          $ref: "#/components/schemas/Binary"
        s:
          $ref: "#/components/schemas/Binary"
    NftTokenId:
      required:
      - "signature"
      - "tokenId"
      type: "object"
      properties:
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        signature:
          $ref: "#/components/schemas/NftSignature"
    NftItem:
      required:
      - "id"
      - "contract"
      - "tokenId"
      - "creators"
      - "supply"
      - "lazySupply"
      type: "object"
      properties:
        id:
          type: "string"
          description: "Item identifier, has format '${contract}:${tokenId}'"
        contract:
          $ref: "#/components/schemas/Address"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        creators:
          type: "array"
          description: "Creators of the target item"
          items:
            $ref: "#/components/schemas/Part"
        supply:
          $ref: "#/components/schemas/BigInteger"
        lazySupply:
          $ref: "#/components/schemas/BigInteger"
        owners:
          type: "array"
          deprecated: true
          description: "Owners of the target items"
          items:
            $ref: "#/components/schemas/Address"
        royalties:
          type: "array"
          deprecated: true
          description: "Use a special endpoint '/v0.1/items/{itemId}/royalty'"
          items:
            $ref: "#/components/schemas/Part"
        lastUpdatedAt:
          type: "string"
          format: "date-time"
          description: "Datetime when the item was created"
        mintedAt:
          type: "string"
          format: "date-time"
          description: "Datetime when the item was minted"
        pending:
          type: "array"
          description: "Pending information about the item"
          items:
            $ref: "#/components/schemas/ItemTransfer"
        deleted:
          type: "boolean"
          description: "Item was deleted or not"
        meta:
          $ref: "#/components/schemas/NftItemMeta"
          deprecated: true
          description: "Deprecated and will be removed. Ethereum Protocol API will\
            \ not be responsible for loading NFT metadata. Please migrate to Rarible\
            \ Multichain Protocol (https://docs.rarible.org/) and especially this\
            \ endpoint - https://api.rarible.org/v0.1/doc#operation/getItemById."
    NftItemAttribute:
      required:
      - "key"
      type: "object"
      properties:
        key:
          type: "string"
        value:
          type: "string"
        type:
          type: "string"
        format:
          type: "string"
    NftItemRoyalty:
      required:
      - "account"
      - "value"
      type: "object"
      properties:
        account:
          $ref: "#/components/schemas/Address"
        value:
          type: "integer"
    NftDeletedItem:
      required:
      - "id"
      - "token"
      - "tokenId"
      type: "object"
      properties:
        id:
          type: "string"
          description: "Item identifier, has format '${contract}:${tokenId}'"
        token:
          $ref: "#/components/schemas/Address"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
    NftItemEvent:
      required:
      - "eventId"
      - "itemId"
      properties:
        eventId:
          type: "string"
        itemId:
          type: "string"
      oneOf:
      - $ref: "#/components/schemas/NftItemUpdateEvent"
      - $ref: "#/components/schemas/NftItemDeleteEvent"
    NftItemUpdateEvent:
      type: "object"
      required:
      - "item"
      properties:
        type:
          type: "string"
          enum:
          - "UPDATE"
        item:
          $ref: "#/components/schemas/NftItem"
    NftItemDeleteEvent:
      type: "object"
      required:
      - "item"
      properties:
        type:
          type: "string"
          enum:
          - "DELETE"
        item:
          $ref: "#/components/schemas/NftDeletedItem"
    NftItems:
      required:
      - "total"
      - "items"
      type: "object"
      properties:
        total:
          type: "integer"
          description: "The total number of items satisfy the query"
          format: "int64"
        continuation:
          type: "string"
          description: "Continuation token from the previous response"
        items:
          type: "array"
          description: "List of found items"
          items:
            $ref: "#/components/schemas/NftItem"
    NftItemMeta:
      required:
      - "name"
      type: "object"
      properties:
        name:
          type: "string"
          description: "Name of the NFT item"
        description:
          type: "string"
          description: "Description of the NFT item"
        attributes:
          type: "array"
          description: "Attributes of the NFT item"
          items:
            $ref: "#/components/schemas/NftItemAttribute"
        image:
          $ref: "#/components/schemas/NftMedia"
        animation:
          $ref: "#/components/schemas/NftMedia"
    NftCollectionMeta:
      required:
      - "name"
      type: "object"
      properties:
        name:
          type: "string"
          description: "Name of the NFT collection"
        description:
          type: "string"
          description: "Description of the NFT collection"
        image:
          $ref: "#/components/schemas/NftMedia"
        external_link:
          type: "string"
          description: "External link to the original website for the collection"
        seller_fee_basis_points:
          type: "integer"
          format: "int32"
          description: "Indicates a 1% seller fee"
        fee_recipient:
          description: "Where seller fees will be paid to"
          $ref: "#/components/schemas/Address"
    NftItemRoyaltyList:
      type: "object"
      properties:
        royalty:
          type: "array"
          items:
            $ref: "#/components/schemas/NftItemRoyalty"
    NftMedia:
      required:
      - "meta"
      - "url"
      type: "object"
      properties:
        url:
          type: "object"
          description: "URL address of the NFT media"
          additionalProperties:
            type: "string"
        meta:
          type: "object"
          description: "Meta of the NFT media"
          additionalProperties:
            $ref: "#/components/schemas/NftMediaMeta"
    NftMediaMeta:
      required:
      - "type"
      type: "object"
      properties:
        type:
          type: "string"
          description: "NFT media type"
        width:
          type: "integer"
          format: "int32"
          description: "Width of the NFT image/video"
        height:
          type: "integer"
          format: "int32"
          description: "Height of the NFT image/video"
    LazyNft:
      type: "object"
      required:
      - "contract"
      - "tokenId"
      - "uri"
      - "creators"
      - "royalties"
      - "signatures"
      properties:
        contract:
          $ref: "#/components/schemas/Address"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        uri:
          type: "string"
          description: "Uniform Resource Identifier of the token"
        creators:
          type: "array"
          description: "Addresses of the NFT item creators"
          items:
            $ref: "#/components/schemas/Part"
        royalties:
          type: "array"
          description: "List of royalties"
          items:
            $ref: "#/components/schemas/Part"
        signatures:
          type: "array"
          description: "Digital signatures"
          items:
            $ref: "#/components/schemas/Binary"
      description: "Type of an Asset"
      oneOf:
      - $ref: "#/components/schemas/LazyErc721"
      - $ref: "#/components/schemas/LazyErc1155"
    BurnLazyNftForm:
      type: "object"
      required:
      - "creators"
      - "signatures"
      properties:
        creators:
          type: "array"
          description: "Address of the NFT item creators"
          items:
            $ref: "#/components/schemas/Address"
        signatures:
          type: "array"
          description: "Digital signatures"
          items:
            $ref: "#/components/schemas/Binary"
    LazyErc1155:
      type: "object"
      required:
      - "@type"
      - "supply"
      properties:
        '@type':
          type: "string"
          enum:
          - "ERC1155"
        supply:
          $ref: "#/components/schemas/BigInteger"
    LazyErc721:
      type: "object"
      required:
      - "@type"
      properties:
        '@type':
          type: "string"
          enum:
          - "ERC721"
    NftDeletedOwnership:
      required:
      - "id"
      - "token"
      - "tokenId"
      - "owner"
      type: "object"
      properties:
        id:
          type: "string"
          description: "Ownership identifier, has format '${token}:${tokenId}:${owner}'"
        token:
          $ref: "#/components/schemas/Address"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        owner:
          $ref: "#/components/schemas/Address"
    NftOwnership:
      required:
      - "id"
      - "contract"
      - "tokenId"
      - "owner"
      - "value"
      - "lazyValue"
      - "date"
      - "pending"
      type: "object"
      properties:
        id:
          type: "string"
          description: "Ownership identifier, has format '${token}:${tokenId}:${owner}'"
        contract:
          $ref: "#/components/schemas/Address"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        owner:
          $ref: "#/components/schemas/Address"
        creators:
          type: "array"
          deprecated: true
          description: "Creators of the target item"
          items:
            $ref: "#/components/schemas/Part"
        value:
          $ref: "#/components/schemas/BigInteger"
        lazyValue:
          $ref: "#/components/schemas/BigInteger"
        date:
          type: "string"
          description: "Start date of ownership"
          format: "date-time"
        pending:
          type: "array"
          description: "History of ownership"
          items:
            $ref: "#/components/schemas/ItemHistory"
    NftOwnershipEvent:
      required:
      - "eventId"
      - "ownershipId"
      properties:
        eventId:
          type: "string"
        ownershipId:
          type: "string"
      oneOf:
      - $ref: "#/components/schemas/NftOwnershipUpdateEvent"
      - $ref: "#/components/schemas/NftOwnershipDeleteEvent"
    NftOwnershipUpdateEvent:
      type: "object"
      required:
      - "ownership"
      properties:
        type:
          type: "string"
          enum:
          - "UPDATE"
        ownership:
          $ref: "#/components/schemas/NftOwnership"
    NftOwnershipDeleteEvent:
      type: "object"
      properties:
        type:
          type: "string"
          enum:
          - "DELETE"
        ownership:
          $ref: "#/components/schemas/NftDeletedOwnership"
        deletedOwnership:
          $ref: "#/components/schemas/NftOwnership"
    NftOwnerships:
      required:
      - "ownerships"
      - "total"
      type: "object"
      properties:
        total:
          type: "integer"
          description: "Number of ownerships were found by request"
          format: "int64"
        continuation:
          type: "string"
          description: "Continuation token to paginate Ownerships search result"
        ownerships:
          type: "array"
          description: "List of found ownerships"
          items:
            $ref: "#/components/schemas/NftOwnership"
    NftMediaSize:
      type: "string"
      enum:
      - "ORIGINAL"
      - "BIG"
      - "PREVIEW"
    NftItemIds:
      type: "object"
      required:
      - "ids"
      properties:
        ids:
          type: "array"
          description: "List of the items id"
          items:
            type: "string"
    EthereumApiErrorEntityNotFound:
      required:
      - "code"
      - "message"
      type: "object"
      properties:
        code:
          type: "string"
          description: "Error type"
          enum:
          - "NOT_FOUND"
        message:
          type: "string"
          description: "Error message"
        status:
          type: "integer"
          description: "HTTP status code"
          default: 404
    EthereumApiErrorBadRequest:
      required:
      - "code"
      - "message"
      type: "object"
      properties:
        code:
          type: "string"
          description: "Error type. `BAD_REQUEST` - incorrect format of input data,\
            \ `VALIDATION` - input data format is correct, but its content doesn't\
            \ meet requirements of API call"
          enum:
          - "BAD_REQUEST"
          - "VALIDATION"
        message:
          type: "string"
          description: "Error message"
        status:
          type: "integer"
          description: "HTTP status code"
          default: 400
    EthereumApiErrorServerError:
      required:
      - "code"
      - "message"
      - "status"
      type: "object"
      properties:
        code:
          type: "string"
          description: "Error type"
          enum:
          - "UNKNOWN"
        message:
          type: "string"
          description: "Error message"
        status:
          type: "integer"
          description: "HTTP status code"
          default: 500
    Activity:
      type: "object"
      required:
      - "id"
      - "date"
      properties:
        id:
          type: "string"
          description: "Activity identifier"
        date:
          type: "string"
          format: "date-time"
          description: "Date and time when the event, related to activity, happened"
      oneOf:
      - $ref: "#/components/schemas/OrderActivity"
      - $ref: "#/components/schemas/NftActivity"
      - $ref: "#/components/schemas/AuctionActivity"
    OrderActivityMatchSide:
      type: "object"
      required:
      - "maker"
      - "hash"
      - "asset"
      properties:
        maker:
          $ref: "#/components/schemas/Address"
        hash:
          $ref: "#/components/schemas/Word"
        asset:
          $ref: "#/components/schemas/Asset"
        type:
          type: "string"
          enum:
          - "SELL"
          - "BID"
    OrderActivity:
      type: "object"
      required:
      - "id"
      - "date"
      - "source"
      properties:
        id:
          type: "string"
        date:
          type: "string"
          format: "date-time"
        source:
          type: "string"
          enum:
          - "RARIBLE"
          - "OPEN_SEA"
          - "CRYPTO_PUNKS"
      oneOf:
      - $ref: "#/components/schemas/OrderActivityMatch"
      - $ref: "#/components/schemas/OrderActivityBid"
      - $ref: "#/components/schemas/OrderActivityList"
      - $ref: "#/components/schemas/OrderActivityCancelBid"
      - $ref: "#/components/schemas/OrderActivityCancelList"
    OrderActivityMatch:
      type: "object"
      required:
      - "@type"
      - "left"
      - "right"
      - "price"
      - "transactionHash"
      - "blockHash"
      - "blockNumber"
      - "logIndex"
      properties:
        '@type':
          type: "string"
          enum:
          - "match"
        left:
          $ref: "#/components/schemas/OrderActivityMatchSide"
        right:
          $ref: "#/components/schemas/OrderActivityMatchSide"
        price:
          $ref: "#/components/schemas/BigDecimal"
        priceUsd:
          $ref: "#/components/schemas/BigDecimal"
        transactionHash:
          $ref: "#/components/schemas/Word"
        blockHash:
          $ref: "#/components/schemas/Word"
        blockNumber:
          type: "integer"
          format: "int64"
        logIndex:
          type: "integer"
        type:
          type: "string"
          enum:
          - "SELL"
          - "ACCEPT_BID"
    OrderActivityBid:
      type: "object"
      required:
      - "@type"
      - "hash"
      - "maker"
      - "make"
      - "take"
      - "price"
      properties:
        '@type':
          type: "string"
          enum:
          - "bid"
        hash:
          $ref: "#/components/schemas/Word"
        maker:
          $ref: "#/components/schemas/Address"
        make:
          $ref: "#/components/schemas/Asset"
        take:
          $ref: "#/components/schemas/Asset"
        price:
          $ref: "#/components/schemas/BigDecimal"
        priceUsd:
          $ref: "#/components/schemas/BigDecimal"
    OrderActivityList:
      type: "object"
      required:
      - "@type"
      - "hash"
      - "maker"
      - "make"
      - "take"
      - "price"
      properties:
        '@type':
          type: "string"
          enum:
          - "list"
        hash:
          $ref: "#/components/schemas/Word"
        maker:
          $ref: "#/components/schemas/Address"
        make:
          $ref: "#/components/schemas/Asset"
        take:
          $ref: "#/components/schemas/Asset"
        price:
          $ref: "#/components/schemas/BigDecimal"
        priceUsd:
          $ref: "#/components/schemas/BigDecimal"
    OrderActivityCancelBid:
      type: "object"
      required:
      - "@type"
      - "hash"
      - "maker"
      - "make"
      - "take"
      - "transactionHash"
      - "blockHash"
      - "blockNumber"
      - "logIndex"
      properties:
        '@type':
          type: "string"
          enum:
          - "cancel_bid"
        hash:
          $ref: "#/components/schemas/Word"
        maker:
          $ref: "#/components/schemas/Address"
        make:
          $ref: "#/components/schemas/AssetType"
        take:
          $ref: "#/components/schemas/AssetType"
        transactionHash:
          $ref: "#/components/schemas/Word"
        blockHash:
          $ref: "#/components/schemas/Word"
        blockNumber:
          type: "integer"
          format: "int64"
        logIndex:
          type: "integer"
    OrderActivityCancelList:
      type: "object"
      required:
      - "@type"
      - "hash"
      - "maker"
      - "make"
      - "take"
      - "transactionHash"
      - "blockHash"
      - "blockNumber"
      - "logIndex"
      properties:
        '@type':
          type: "string"
          enum:
          - "cancel_list"
        hash:
          $ref: "#/components/schemas/Word"
        maker:
          $ref: "#/components/schemas/Address"
        make:
          $ref: "#/components/schemas/AssetType"
        take:
          $ref: "#/components/schemas/AssetType"
        transactionHash:
          $ref: "#/components/schemas/Word"
        blockHash:
          $ref: "#/components/schemas/Word"
        blockNumber:
          type: "integer"
          format: "int64"
        logIndex:
          type: "integer"
    NftActivity:
      type: "object"
      required:
      - "owner"
      - "contract"
      - "tokenId"
      - "value"
      - "transactionHash"
      - "blockHash"
      - "blockNumber"
      - "logIndex"
      properties:
        owner:
          $ref: "#/components/schemas/Address"
        contract:
          $ref: "#/components/schemas/Address"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        value:
          $ref: "#/components/schemas/BigInteger"
        transactionHash:
          $ref: "#/components/schemas/Word"
        blockHash:
          $ref: "#/components/schemas/Word"
        blockNumber:
          type: "integer"
          format: "int64"
        logIndex:
          type: "integer"
      oneOf:
      - $ref: "#/components/schemas/Mint"
      - $ref: "#/components/schemas/Burn"
      - $ref: "#/components/schemas/Transfer"
    Mint:
      type: "object"
      required:
      - "@type"
      properties:
        '@type':
          type: "string"
          enum:
          - "mint"
    Burn:
      type: "object"
      required:
      - "@type"
      properties:
        '@type':
          type: "string"
          enum:
          - "burn"
    Transfer:
      type: "object"
      required:
      - "@type"
      - "from"
      properties:
        '@type':
          type: "string"
          enum:
          - "transfer"
        from:
          $ref: "#/components/schemas/Address"
    AuctionStatus:
      type: "string"
      enum:
      - "ACTIVE"
      - "CANCELLED"
      - "FINISHED"
    AuctionHistory:
      type: "object"
      required:
      - "hash"
      properties:
        hash:
          $ref: "#/components/schemas/Word"
    Auction:
      type: "object"
      required:
      - "contract"
      - "seller"
      - "sell"
      - "buy"
      - "minimalStep"
      - "minimalPrice"
      - "createdAt"
      - "lastUpdateAt"
      - "status"
      - "ongoing"
      - "hash"
      properties:
        contract:
          $ref: "#/components/schemas/Address"
        seller:
          $ref: "#/components/schemas/Address"
        sell:
          $ref: "#/components/schemas/Asset"
        buy:
          $ref: "#/components/schemas/AssetType"
        endTime:
          type: "string"
          format: "date-time"
        minimalStep:
          $ref: "#/components/schemas/BigDecimal"
        minimalPrice:
          $ref: "#/components/schemas/BigDecimal"
        createdAt:
          type: "string"
          format: "date-time"
        lastUpdateAt:
          type: "string"
          format: "date-time"
        buyPrice:
          $ref: "#/components/schemas/BigDecimal"
        buyPriceUsd:
          $ref: "#/components/schemas/BigDecimal"
        pending:
          type: "array"
          items:
            $ref: "#/components/schemas/AuctionHistory"
        status:
          $ref: "#/components/schemas/AuctionStatus"
        ongoing:
          type: "boolean"
        hash:
          $ref: "#/components/schemas/Word"
      oneOf:
      - $ref: "#/components/schemas/RaribleAuctionV1"
    RaribleAuctionV1:
      type: "object"
      required:
      - "auctionId"
      - "data"
      properties:
        type:
          type: "string"
          enum:
          - "RARIBLE_AUCTION_V1"
        auctionId:
          $ref: "#/components/schemas/BigInteger"
        lastBid:
          $ref: "#/components/schemas/RaribleAuctionV1BidV1"
        data:
          $ref: "#/components/schemas/RaribleAuctionV1DataV1"
    AuctionData:
      type: "object"
      oneOf:
      - $ref: "#/components/schemas/RaribleAuctionV1DataV1"
    RaribleAuctionV1DataV1:
      type: "object"
      required:
      - "originFees"
      - "payouts"
      - "duration"
      properties:
        dataType:
          type: "string"
          description: "Data type of the auction"
          enum:
          - "RARIBLE_AUCTION_V1_DATA_V1"
        originFees:
          type: "array"
          description: "Value of the origin fees for the auction"
          items:
            $ref: "#/components/schemas/Part"
        payouts:
          type: "array"
          description: "Value of the payouts for the auction"
          items:
            $ref: "#/components/schemas/Part"
        startTime:
          type: "string"
          format: "date-time"
        duration:
          $ref: "#/components/schemas/BigInteger"
        buyOutPrice:
          $ref: "#/components/schemas/BigDecimal"
    AuctionActivity:
      type: "object"
      required:
      - "id"
      - "date"
      - "source"
      - "auction"
      properties:
        id:
          type: "string"
        date:
          type: "string"
          format: "date-time"
        source:
          type: "string"
          enum:
          - "RARIBLE"
        auction:
          $ref: "#/components/schemas/Auction"
      oneOf:
      - $ref: "#/components/schemas/AuctionActivityOpen"
      - $ref: "#/components/schemas/AuctionActivityBid"
      - $ref: "#/components/schemas/AuctionActivityFinish"
      - $ref: "#/components/schemas/AuctionActivityCancel"
      - $ref: "#/components/schemas/AuctionActivityStart"
      - $ref: "#/components/schemas/AuctionActivityEnd"
    AuctionActivityOpen:
      type: "object"
      required:
      - "@type"
      - "transactionHash"
      - "blockHash"
      - "blockNumber"
      - "logIndex"
      properties:
        '@type':
          type: "string"
          enum:
          - "auction_open"
        transactionHash:
          $ref: "#/components/schemas/Word"
        blockHash:
          $ref: "#/components/schemas/Word"
        blockNumber:
          type: "integer"
          format: "int64"
        logIndex:
          type: "integer"
    AuctionActivityBid:
      type: "object"
      required:
      - "@type"
      - "bid"
      - "transactionHash"
      - "blockHash"
      - "blockNumber"
      - "logIndex"
      properties:
        '@type':
          type: "string"
          enum:
          - "auction_bid"
        bid:
          $ref: "#/components/schemas/AuctionBid"
        transactionHash:
          $ref: "#/components/schemas/Word"
        blockHash:
          $ref: "#/components/schemas/Word"
        blockNumber:
          type: "integer"
          format: "int64"
        logIndex:
          type: "integer"
    AuctionActivityFinish:
      type: "object"
      required:
      - "@type"
      - "transactionHash"
      - "blockHash"
      - "blockNumber"
      - "logIndex"
      properties:
        '@type':
          type: "string"
          enum:
          - "auction_finish"
        transactionHash:
          $ref: "#/components/schemas/Word"
        blockHash:
          $ref: "#/components/schemas/Word"
        blockNumber:
          type: "integer"
          format: "int64"
        logIndex:
          type: "integer"
    AuctionActivityCancel:
      type: "object"
      required:
      - "@type"
      - "transactionHash"
      - "blockHash"
      - "blockNumber"
      - "logIndex"
      properties:
        '@type':
          type: "string"
          enum:
          - "auction_cancel"
        transactionHash:
          $ref: "#/components/schemas/Word"
        blockHash:
          $ref: "#/components/schemas/Word"
        blockNumber:
          type: "integer"
          format: "int64"
        logIndex:
          type: "integer"
    AuctionActivityStart:
      type: "object"
      required:
      - "@type"
      properties:
        '@type':
          type: "string"
          enum:
          - "auction_start"
    AuctionActivityEnd:
      type: "object"
      required:
      - "@type"
      properties:
        '@type':
          type: "string"
          enum:
          - "auction_end"
    Activities:
      type: "object"
      required:
      - "items"
      properties:
        continuation:
          type: "string"
          description: "Continuation token from the previous response"
        items:
          type: "array"
          description: "Items array"
          items:
            $ref: "#/components/schemas/Activity"
    ActivityContinuation:
      type: "object"
      required:
      - "afterDate"
      - "afterId"
      properties:
        afterDate:
          type: "string"
          format: "date-time"
        afterId:
          type: "string"
    ActivitySort:
      type: "string"
      enum:
      - "LATEST_FIRST"
      - "EARLIEST_FIRST"
    ActivityFilter:
      type: "object"
      oneOf:
      - $ref: "#/components/schemas/ActivityFilterAll"
      - $ref: "#/components/schemas/ActivityFilterByUser"
      - $ref: "#/components/schemas/ActivityFilterByItem"
      - $ref: "#/components/schemas/ActivityFilterByCollection"
    ActivityFilterAll:
      type: "object"
      required:
      - "@type"
      - "types"
      properties:
        '@type':
          type: "string"
          enum:
          - "all"
        types:
          type: "array"
          items:
            $ref: "#/components/schemas/ActivityFilterAllType"
    ActivityFilterAllType:
      type: "string"
      enum:
      - "TRANSFER"
      - "MINT"
      - "BURN"
      - "BID"
      - "LIST"
      - "SELL"
      - "CANCEL_BID"
      - "CANCEL_LIST"
    ActivityFilterByUser:
      type: "object"
      required:
      - "@type"
      - "types"
      - "users"
      properties:
        '@type':
          type: "string"
          enum:
          - "by_user"
        users:
          type: "array"
          items:
            $ref: "#/components/schemas/Address"
        types:
          type: "array"
          items:
            $ref: "#/components/schemas/ActivityFilterByUserType"
        from:
          type: "integer"
          format: "int64"
        to:
          type: "integer"
          format: "int64"
    ActivityFilterByUserType:
      type: "string"
      enum:
      - "TRANSFER_FROM"
      - "TRANSFER_TO"
      - "MINT"
      - "BURN"
      - "MAKE_BID"
      - "GET_BID"
      - "LIST"
      - "BUY"
      - "SELL"
      - "CANCEL_BID"
      - "CANCEL_LIST"
    ActivityFilterByItem:
      type: "object"
      required:
      - "@type"
      - "contract"
      - "tokenId"
      - "types"
      properties:
        '@type':
          type: "string"
          enum:
          - "by_item"
        contract:
          $ref: "#/components/schemas/Address"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        types:
          type: "array"
          items:
            $ref: "#/components/schemas/ActivityFilterByItemType"
    ActivityFilterByItemType:
      type: "string"
      enum:
      - "TRANSFER"
      - "MINT"
      - "BURN"
      - "BID"
      - "LIST"
      - "MATCH"
      - "CANCEL_BID"
      - "CANCEL_LIST"
    ActivityFilterByCollection:
      type: "object"
      required:
      - "@type"
      - "contract"
      - "types"
      properties:
        '@type':
          type: "string"
          enum:
          - "by_collection"
        contract:
          $ref: "#/components/schemas/Address"
        types:
          type: "array"
          items:
            $ref: "#/components/schemas/ActivityFilterByCollectionType"
    ActivityFilterByCollectionType:
      type: "string"
      enum:
      - "TRANSFER"
      - "MINT"
      - "BURN"
      - "BID"
      - "LIST"
      - "MATCH"
      - "CANCEL_BID"
      - "CANCEL_LIST"
    NftActivityFilter:
      type: "object"
      oneOf:
      - $ref: "#/components/schemas/NftActivityFilterAll"
      - $ref: "#/components/schemas/NftActivityFilterByUser"
      - $ref: "#/components/schemas/NftActivityFilterByItem"
      - $ref: "#/components/schemas/NftActivityFilterByCollection"
    NftActivityFilterAll:
      type: "object"
      required:
      - "@type"
      - "types"
      properties:
        '@type':
          type: "string"
          enum:
          - "all"
        types:
          type: "array"
          items:
            type: "string"
            description: "Type of the NFT activity"
            enum:
            - "TRANSFER"
            - "MINT"
            - "BURN"
    NftActivityFilterByUser:
      type: "object"
      required:
      - "@type"
      - "types"
      - "users"
      properties:
        '@type':
          type: "string"
          enum:
          - "by_user"
        users:
          type: "array"
          description: "List of NFT users"
          items:
            $ref: "#/components/schemas/Address"
        types:
          type: "array"
          items:
            type: "string"
            description: "Type of the NFT activity"
            enum:
            - "TRANSFER_FROM"
            - "TRANSFER_TO"
            - "MINT"
            - "BURN"
        from:
          type: "integer"
          format: "int64"
        to:
          type: "integer"
          format: "int64"
    NftActivityFilterByItem:
      type: "object"
      required:
      - "@type"
      - "contract"
      - "tokenId"
      - "types"
      properties:
        '@type':
          type: "string"
          enum:
          - "by_item"
        contract:
          $ref: "#/components/schemas/Address"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        types:
          type: "array"
          description: "Type of the NFT activity"
          items:
            type: "string"
            enum:
            - "TRANSFER"
            - "MINT"
            - "BURN"
    NftActivityFilterByCollection:
      type: "object"
      required:
      - "@type"
      - "contract"
      - "types"
      properties:
        '@type':
          type: "string"
          enum:
          - "by_collection"
        contract:
          $ref: "#/components/schemas/Address"
        types:
          type: "array"
          description: "Type of the NFT activity"
          items:
            type: "string"
            enum:
            - "TRANSFER"
            - "MINT"
            - "BURN"
    OrderActivityFilter:
      type: "object"
      oneOf:
      - $ref: "#/components/schemas/OrderActivityFilterAll"
      - $ref: "#/components/schemas/OrderActivityFilterByUser"
      - $ref: "#/components/schemas/OrderActivityFilterByItem"
      - $ref: "#/components/schemas/OrderActivityFilterByCollection"
    OrderActivityFilterAll:
      type: "object"
      required:
      - "@type"
      - "types"
      properties:
        '@type':
          type: "string"
          enum:
          - "all"
        types:
          type: "array"
          items:
            type: "string"
            description: "Order activity type"
            enum:
            - "BID"
            - "LIST"
            - "MATCH"
            - "CANCEL_BID"
            - "CANCEL_LIST"
    OrderActivityFilterByUser:
      type: "object"
      required:
      - "@type"
      - "types"
      - "users"
      properties:
        '@type':
          type: "string"
          enum:
          - "by_user"
        users:
          type: "array"
          description: "List of users"
          items:
            $ref: "#/components/schemas/Address"
        types:
          type: "array"
          items:
            type: "string"
            description: "Order activity type by user"
            enum:
            - "MAKE_BID"
            - "GET_BID"
            - "LIST"
            - "BUY"
            - "SELL"
            - "CANCEL_BID"
            - "CANCEL_LIST"
        from:
          type: "integer"
          format: "int64"
        to:
          type: "integer"
          format: "int64"
    OrderActivityFilterByItem:
      type: "object"
      required:
      - "@type"
      - "contract"
      - "tokenId"
      - "types"
      properties:
        '@type':
          type: "string"
          enum:
          - "by_item"
        contract:
          $ref: "#/components/schemas/Address"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        types:
          type: "array"
          items:
            type: "string"
            description: "Order activity type"
            enum:
            - "BID"
            - "LIST"
            - "MATCH"
            - "CANCEL_BID"
            - "CANCEL_LIST"
    OrderActivityFilterByCollection:
      type: "object"
      required:
      - "@type"
      - "contract"
      - "types"
      properties:
        '@type':
          type: "string"
          enum:
          - "by_collection"
        contract:
          $ref: "#/components/schemas/Address"
        types:
          type: "array"
          items:
            type: "string"
            description: "Order activity type"
            enum:
            - "BID"
            - "LIST"
            - "MATCH"
            - "CANCEL_BID"
            - "CANCEL_LIST"
    AuctionActivityFilter:
      type: "object"
      oneOf:
      - $ref: "#/components/schemas/AuctionActivityFilterAll"
      - $ref: "#/components/schemas/AuctionActivityFilterByUser"
      - $ref: "#/components/schemas/AuctionActivityFilterByItem"
      - $ref: "#/components/schemas/AuctionActivityFilterByCollection"
    AuctionActivityFilterAll:
      type: "object"
      required:
      - "@type"
      - "types"
      properties:
        '@type':
          type: "string"
          enum:
          - "all"
        types:
          type: "array"
          items:
            type: "string"
            description: "Auction activity type"
            enum:
            - "CREATED"
            - "BID"
            - "CANCEL"
            - "FINISHED"
            - "STARTED"
            - "ENDED"
    AuctionActivityFilterByUser:
      type: "object"
      required:
      - "@type"
      - "types"
      - "user"
      properties:
        '@type':
          type: "string"
          enum:
          - "by_user"
        users:
          type: "array"
          description: "List of users"
          items:
            $ref: "#/components/schemas/Address"
        types:
          type: "array"
          items:
            type: "string"
            description: "Auction activity type by user"
            enum:
            - "CREATED"
            - "BID"
            - "CANCEL"
            - "FINISHED"
            - "STARTED"
            - "ENDED"
        from:
          type: "integer"
          format: "int64"
        to:
          type: "integer"
          format: "int64"
    AuctionActivityFilterByItem:
      type: "object"
      required:
      - "@type"
      - "contract"
      - "tokenId"
      - "types"
      properties:
        '@type':
          type: "string"
          enum:
          - "by_item"
        contract:
          $ref: "#/components/schemas/Address"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        types:
          type: "array"
          items:
            type: "string"
            description: "Auction activity type"
            enum:
            - "CREATED"
            - "BID"
            - "CANCEL"
            - "FINISHED"
            - "STARTED"
            - "ENDED"
    AuctionActivityFilterByCollection:
      type: "object"
      required:
      - "@type"
      - "contract"
      - "types"
      properties:
        '@type':
          type: "string"
          enum:
          - "by_collection"
        contract:
          $ref: "#/components/schemas/Address"
        types:
          type: "array"
          items:
            type: "string"
            description: "Auction activity type"
            enum:
            - "CREATED"
            - "BID"
            - "CANCEL"
            - "FINISHED"
            - "STARTED"
            - "ENDED"
    ItemHistory:
      type: "object"
      required:
      - "contract"
      - "tokenId"
      - "date"
      properties:
        owner:
          $ref: "#/components/schemas/Address"
        contract:
          $ref: "#/components/schemas/Address"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        value:
          $ref: "#/components/schemas/BigInteger"
        date:
          type: "string"
          format: "date-time"
      description: "History of item"
      oneOf:
      - $ref: "#/components/schemas/ItemRoyalty"
      - $ref: "#/components/schemas/ItemTransfer"
    ItemRoyalty:
      required:
      - "type"
      - "royalties"
      type: "object"
      properties:
        type:
          type: "string"
          enum:
          - "ROYALTY"
        royalties:
          type: "array"
          items:
            $ref: "#/components/schemas/Part"
    ItemTransfer:
      required:
      - "type"
      - "owner"
      - "value"
      - "from"
      type: "object"
      properties:
        type:
          type: "string"
          enum:
          - "TRANSFER"
        from:
          $ref: "#/components/schemas/Address"
    AssetType:
      type: "object"
      oneOf:
      - $ref: "#/components/schemas/EthAssetType"
      - $ref: "#/components/schemas/Erc20AssetType"
      - $ref: "#/components/schemas/Erc721AssetType"
      - $ref: "#/components/schemas/Erc1155AssetType"
      - $ref: "#/components/schemas/Erc721LazyAssetType"
      - $ref: "#/components/schemas/Erc1155LazyAssetType"
      - $ref: "#/components/schemas/CryptoPunksAssetType"
      - $ref: "#/components/schemas/CollectionAssetType"
      - $ref: "#/components/schemas/GenerativeArtAssetType"
    EthAssetType:
      type: "object"
      required:
      - "assetClass"
      properties:
        assetClass:
          type: "string"
          enum:
          - "ETH"
    GenerativeArtAssetType:
      required:
      - "assetClass"
      - "contract"
      type: "object"
      properties:
        assetClass:
          type: "string"
          enum:
          - "GEN_ART"
        contract:
          $ref: "#/components/schemas/Address"
    Erc20AssetType:
      required:
      - "assetClass"
      - "contract"
      type: "object"
      properties:
        assetClass:
          type: "string"
          enum:
          - "ERC20"
        contract:
          $ref: "#/components/schemas/Address"
    Erc721AssetType:
      required:
      - "assetClass"
      - "contract"
      - "tokenId"
      type: "object"
      properties:
        assetClass:
          type: "string"
          enum:
          - "ERC721"
        contract:
          $ref: "#/components/schemas/Address"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
    Erc1155AssetType:
      required:
      - "assetClass"
      - "contract"
      - "tokenId"
      type: "object"
      properties:
        assetClass:
          type: "string"
          enum:
          - "ERC1155"
        contract:
          $ref: "#/components/schemas/Address"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
    Erc721LazyAssetType:
      required:
      - "assetClass"
      - "contract"
      - "tokenId"
      - "uri"
      - "creators"
      - "royalties"
      - "signatures"
      type: "object"
      properties:
        assetClass:
          type: "string"
          enum:
          - "ERC721_LAZY"
        contract:
          $ref: "#/components/schemas/Address"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        uri:
          type: "string"
        creators:
          type: "array"
          items:
            $ref: "#/components/schemas/Part"
        royalties:
          type: "array"
          items:
            $ref: "#/components/schemas/Part"
        signatures:
          type: "array"
          items:
            $ref: "#/components/schemas/Binary"
    Erc1155LazyAssetType:
      required:
      - "assetClass"
      - "contract"
      - "tokenId"
      - "uri"
      - "supply"
      - "creators"
      - "royalties"
      - "signatures"
      type: "object"
      properties:
        assetClass:
          type: "string"
          enum:
          - "ERC1155_LAZY"
        contract:
          $ref: "#/components/schemas/Address"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        uri:
          type: "string"
        supply:
          $ref: "#/components/schemas/BigInteger"
        creators:
          type: "array"
          items:
            $ref: "#/components/schemas/Part"
        royalties:
          type: "array"
          items:
            $ref: "#/components/schemas/Part"
        signatures:
          type: "array"
          items:
            $ref: "#/components/schemas/Binary"
    CryptoPunksAssetType:
      required:
      - "assetClass"
      - "contract"
      - "tokenId"
      type: "object"
      properties:
        assetClass:
          type: "string"
          enum:
          - "CRYPTO_PUNKS"
        contract:
          $ref: "#/components/schemas/Address"
        tokenId:
          type: "integer"
    CollectionAssetType:
      required:
      - "assetClass"
      - "contract"
      type: "object"
      properties:
        assetClass:
          type: "string"
          enum:
          - "COLLECTION"
        contract:
          $ref: "#/components/schemas/Address"
    Asset:
      type: "object"
      required:
      - "assetType"
      - "value"
      properties:
        assetType:
          $ref: "#/components/schemas/AssetType"
        value:
          $ref: "#/components/schemas/BigInteger"
        valueDecimal:
          $ref: "#/components/schemas/BigDecimal"
    AuctionBid:
      type: "object"
      required:
      - "buyer"
      - "amount"
      - "date"
      - "status"
      properties:
        buyer:
          $ref: "#/components/schemas/Address"
        amount:
          $ref: "#/components/schemas/BigDecimal"
        date:
          type: "string"
          format: "date-time"
          description: "Date and time when the bid was created"
        status:
          type: "string"
          description: "Status of the auction bid"
          enum:
          - "ACTIVE"
          - "HISTORICAL"
      oneOf:
      - $ref: "#/components/schemas/RaribleAuctionV1BidV1"
    RaribleAuctionV1BidV1:
      type: "object"
      required:
      - "data"
      properties:
        type:
          type: "string"
          description: "Type of the auction bid"
          enum:
          - "RARIBLE_AUCTION_V1_BID_V1"
        data:
          $ref: "#/components/schemas/RaribleAuctionV1BidDataV1"
    AuctionBidData:
      type: "object"
      oneOf:
      - $ref: "#/components/schemas/RaribleAuctionV1BidDataV1"
    RaribleAuctionV1BidDataV1:
      type: "object"
      required:
      - "originFees"
      - "payouts"
      properties:
        dataType:
          type: "string"
          description: "Data type of the auction bid data"
          enum:
          - "RARIBLE_AUCTION_V1_BID_DATA_V1"
        originFees:
          type: "array"
          description: "Value of the origin fees for the auction bid data"
          items:
            $ref: "#/components/schemas/Part"
        payouts:
          type: "array"
          description: "Value of the payouts for the auction bid data"
          items:
            $ref: "#/components/schemas/Part"
    Part:
      required:
      - "account"
      - "value"
      type: "object"
      properties:
        account:
          $ref: "#/components/schemas/Address"
        value:
          type: "integer"
    CreateTransactionRequest:
      required:
      - "from"
      - "hash"
      - "input"
      - "nonce"
      type: "object"
      properties:
        hash:
          $ref: "#/components/schemas/Word"
        from:
          $ref: "#/components/schemas/Address"
        nonce:
          type: "integer"
          format: "int64"
        to:
          $ref: "#/components/schemas/Address"
        input:
          $ref: "#/components/schemas/Binary"
    LogEvent:
      required:
      - "transactionHash"
      - "status"
      - "address"
      - "topic"
      type: "object"
      properties:
        transactionHash:
          $ref: "#/components/schemas/Word"
        status:
          type: "string"
          description: "Order transaction status"
          enum:
          - "PENDING"
          - "CONFIRMED"
          - "REVERTED"
          - "DROPPED"
          - "INACTIVE"
        address:
          $ref: "#/components/schemas/Address"
        topic:
          $ref: "#/components/schemas/Word"
    Word:
      type: "string"
    Binary:
      type: "string"
    OrderActivities:
      required:
      - "items"
      type: "object"
      properties:
        continuation:
          type: "string"
          description: "Continuation token to paginate items search result"
        items:
          type: "array"
          description: "List of found activities"
          items:
            $ref: "#/components/schemas/OrderActivity"
    AuctionActivities:
      required:
      - "items"
      type: "object"
      properties:
        continuation:
          type: "string"
          description: "Continuation token to paginate items search result"
        items:
          type: "array"
          description: "List of found activities"
          items:
            $ref: "#/components/schemas/AuctionActivity"
    EthereumOrderDataApiError:
      required:
      - "code"
      - "message"
      type: "object"
      properties:
        status:
          default: 400
          type: "integer"
          description: "HTTP status code"
          format: "int32"
        code:
          type: "string"
          description: "Error type. `BAD_REQUEST` - incorrect format of input data,\
            \ `VALIDATION` - input data format is correct, but its content doesn't\
            \ meet requirements of API call, `INCORRECT_ORDER_DATA` - asset type specified\
            \ in the wrong way"
          enum:
          - "BAD_REQUEST"
          - "VALIDATION"
          - "INCORRECT_ORDER_DATA"
        message:
          type: "string"
          description: "Error message"
    EthereumOrderUpdateApiError:
      required:
      - "code"
      - "message"
      type: "object"
      properties:
        code:
          type: "string"
          description: "Error type. `INCORRECT_SIGNATURE` - incorrect signature, `INCORRECT_ORDER_DATA`\
            \ - asset type specified in the wrong way, `INCORRECT_LAZY_ASSET` - lazy\
            \ minting asset specified in the wrong way, `ORDER_CANCELED` - the specified\
            \ order has been canceled, `ORDER_INVALID_UPDATE` - the order has been\
            \ updated incorrectly"
          enum:
          - "INCORRECT_SIGNATURE"
          - "INCORRECT_ORDER_DATA"
          - "INCORRECT_LAZY_ASSET"
          - "ORDER_CANCELED"
          - "ORDER_INVALID_UPDATE"
        message:
          type: "string"
        status:
          default: 400
          type: "integer"
          format: "int32"
    AggregationData:
      type: "object"
      required:
      - "address"
      - "sum"
      - "count"
      properties:
        address:
          $ref: "#/components/schemas/Address"
        sum:
          $ref: "#/components/schemas/BigDecimal"
        count:
          type: "integer"
          format: "int64"
    OrderBid:
      type: "object"
      required:
      - "orderHash"
      - "status"
      - "maker"
      - "make"
      - "take"
      - "fill"
      - "makeStock"
      - "cancelled"
      - "salt"
      - "createdAt"
      properties:
        orderHash:
          $ref: "#/components/schemas/Word"
        status:
          $ref: "#/components/schemas/OrderBidStatus"
        maker:
          $ref: "#/components/schemas/Address"
        taker:
          $ref: "#/components/schemas/Address"
        make:
          $ref: "#/components/schemas/Asset"
        take:
          $ref: "#/components/schemas/Asset"
        makeBalance:
          $ref: "#/components/schemas/BigInteger"
        makePriceUsd:
          $ref: "#/components/schemas/BigDecimal"
        takePriceUsd:
          $ref: "#/components/schemas/BigDecimal"
        fill:
          $ref: "#/components/schemas/BigInteger"
        makeStock:
          $ref: "#/components/schemas/BigInteger"
        cancelled:
          type: "boolean"
        salt:
          $ref: "#/components/schemas/Binary"
        signature:
          $ref: "#/components/schemas/Binary"
        createdAt:
          type: "string"
          format: "date-time"
      oneOf:
      - $ref: "#/components/schemas/LegacyOrderBid"
      - $ref: "#/components/schemas/RaribleV2OrderBid"
      - $ref: "#/components/schemas/OpenSeaV1OrderBid"
      - $ref: "#/components/schemas/CryptoPunksOrderBid"
    LegacyOrderBid:
      type: "object"
      required:
      - "type"
      - "data"
      properties:
        type:
          type: "string"
          enum:
          - "RARIBLE_V1"
        data:
          $ref: "#/components/schemas/OrderDataLegacy"
    RaribleV2OrderBid:
      type: "object"
      required:
      - "type"
      - "data"
      properties:
        type:
          type: "string"
          enum:
          - "RARIBLE_V2"
        data:
          $ref: "#/components/schemas/OrderRaribleV2Data"
    OpenSeaV1OrderBid:
      type: "object"
      required:
      - "type"
      - "data"
      properties:
        type:
          type: "string"
          enum:
          - "OPEN_SEA_V1"
        data:
          $ref: "#/components/schemas/OrderOpenSeaV1DataV1"
    CryptoPunksOrderBid:
      type: "object"
      required:
      - "type"
      properties:
        type:
          type: "string"
          enum:
          - "CRYPTO_PUNKS"
    OrderStatus:
      type: "string"
      enum:
      - "ACTIVE"
      - "FILLED"
      - "HISTORICAL"
      - "INACTIVE"
      - "CANCELLED"
    OrderBidStatus:
      type: "string"
      enum:
      - "ACTIVE"
      - "FILLED"
      - "HISTORICAL"
      - "INACTIVE"
      - "CANCELLED"
    EncodedOrderData:
      type: "object"
      required:
      - "type"
      - "data"
      properties:
        type:
          $ref: "#/components/schemas/Binary"
        data:
          $ref: "#/components/schemas/Binary"
    SignMessage:
      type: "object"
      oneOf:
      - $ref: "#/components/schemas/EIP712SignMessage"
      - $ref: "#/components/schemas/TextSignMessage"
    EIP712SignMessage:
      type: "object"
      required:
      - "@type"
      - "domain"
      - "struct"
      - "structType"
      - "types"
      properties:
        '@type':
          type: "string"
          enum:
          - "EIP712"
        domain:
          $ref: "#/components/schemas/EIP712Domain"
        struct:
          $ref: "#/components/schemas/ObjectNode"
        structType:
          type: "string"
        types:
          $ref: "#/components/schemas/ObjectNode"
    EIP712Domain:
      type: "object"
      required:
      - "name"
      - "version"
      - "chainId"
      - "verifyingContract"
      properties:
        name:
          type: "string"
        version:
          type: "string"
        chainId:
          type: "integer"
        verifyingContract:
          $ref: "#/components/schemas/Address"
    TextSignMessage:
      type: "object"
      required:
      - "@type"
      - "message"
      properties:
        '@type':
          type: "string"
          enum:
          - "TEXT"
        message:
          type: "string"
    EncodedOrder:
      type: "object"
      required:
      - "signMessage"
      properties:
        transferProxyAddress:
          $ref: "#/components/schemas/Address"
        signMessage:
          $ref: "#/components/schemas/SignMessage"
    OrderExchangeHistory:
      type: "object"
      required:
      - "hash"
      - "date"
      properties:
        hash:
          $ref: "#/components/schemas/Word"
        make:
          $ref: "#/components/schemas/Asset"
        take:
          $ref: "#/components/schemas/Asset"
        date:
          type: "string"
          format: "date-time"
        maker:
          $ref: "#/components/schemas/Address"
      oneOf:
      - $ref: "#/components/schemas/OrderCancel"
      - $ref: "#/components/schemas/OrderSideMatch"
      - $ref: "#/components/schemas/OnChainOrder"
    ItemBuy:
      type: "object"
      required:
      - "fill"
      properties:
        type:
          type: "string"
          enum:
          - "BUY"
        fill:
          $ref: "#/components/schemas/BigInteger"
        buyer:
          $ref: "#/components/schemas/Address"
    OrderSide:
      type: "string"
      enum:
      - "LEFT"
      - "RIGHT"
    OrderSideMatch:
      type: "object"
      required:
      - "type"
      - "fill"
      properties:
        type:
          type: "string"
          enum:
          - "ORDER_SIDE_MATCH"
        side:
          $ref: "#/components/schemas/OrderSide"
        fill:
          $ref: "#/components/schemas/BigInteger"
        taker:
          $ref: "#/components/schemas/Address"
        counterHash:
          $ref: "#/components/schemas/Word"
        makeUsd:
          $ref: "#/components/schemas/BigDecimal"
        takeUsd:
          $ref: "#/components/schemas/BigDecimal"
        makePriceUsd:
          $ref: "#/components/schemas/BigDecimal"
        takePriceUsd:
          $ref: "#/components/schemas/BigDecimal"
    OrderCancel:
      type: "object"
      required:
      - "type"
      properties:
        type:
          type: "string"
          enum:
          - "CANCEL"
        owner:
          $ref: "#/components/schemas/Address"
    OnChainOrder:
      type: "object"
      required:
      - "type"
      properties:
        type:
          type: "string"
          enum:
          - "ON_CHAIN_ORDER"
    OrderBidsPagination:
      type: "object"
      required:
      - "items"
      properties:
        items:
          type: "array"
          items:
            $ref: "#/components/schemas/OrderBid"
        continuation:
          type: "string"
    OrderData:
      type: "object"
      oneOf:
      - $ref: "#/components/schemas/OrderRaribleV2Data"
      - $ref: "#/components/schemas/OrderDataLegacy"
      - $ref: "#/components/schemas/OrderOpenSeaV1DataV1"
      - $ref: "#/components/schemas/OrderCryptoPunksData"
    OrderRaribleV2Data:
      type: "object"
      oneOf:
      - $ref: "#/components/schemas/OrderRaribleV2DataV1"
      - $ref: "#/components/schemas/OrderRaribleV2DataV2"
    OrderRaribleV2DataV1:
      type: "object"
      description: "Order data for create or update"
      required:
      - "dataType"
      - "payouts"
      - "originFees"
      properties:
        dataType:
          type: "string"
          description: "Data type of the order"
          enum:
          - "RARIBLE_V2_DATA_V1"
        payouts:
          type: "array"
          description: "Value of the payouts for the order"
          items:
            $ref: "#/components/schemas/Part"
        originFees:
          type: "array"
          description: "Value of the origin fees for the order"
          items:
            $ref: "#/components/schemas/Part"
    OrderRaribleV2DataV2:
      type: "object"
      description: "Order data for create or update"
      required:
      - "dataType"
      - "payouts"
      - "originFees"
      - "isMakeFill"
      properties:
        dataType:
          type: "string"
          description: "Data type of the order"
          enum:
          - "RARIBLE_V2_DATA_V2"
        payouts:
          type: "array"
          description: "Value of the payouts for the order"
          items:
            $ref: "#/components/schemas/Part"
        originFees:
          type: "array"
          description: "Value of the origin fees for the order"
          items:
            $ref: "#/components/schemas/Part"
        isMakeFill:
          type: "boolean"
          description: "If true, the 'fill' part of the order applies to the 'make'\
            \ side, otherwise to the 'take' side"
    OrderDataLegacy:
      type: "object"
      description: "Order data for create or update"
      required:
      - "fee"
      - "dataType"
      properties:
        dataType:
          type: "string"
          description: "Data type of the order"
          enum:
          - "LEGACY"
        fee:
          type: "integer"
          description: "Fee value for operation"
    OrderOpenSeaV1DataV1:
      type: "object"
      required:
      - "dataType"
      - "exchange"
      - "makerRelayerFee"
      - "takerRelayerFee"
      - "makerProtocolFee"
      - "takerProtocolFee"
      - "feeRecipient"
      - "feeMethod"
      - "side"
      - "saleKind"
      - "howToCall"
      - "callData"
      - "replacementPattern"
      - "staticTarget"
      - "staticExtraData"
      - "extra"
      properties:
        dataType:
          type: "string"
          enum:
          - "OPEN_SEA_V1_DATA_V1"
        exchange:
          $ref: "#/components/schemas/Address"
        makerRelayerFee:
          $ref: "#/components/schemas/BigInteger"
        takerRelayerFee:
          $ref: "#/components/schemas/BigInteger"
        makerProtocolFee:
          $ref: "#/components/schemas/BigInteger"
        takerProtocolFee:
          $ref: "#/components/schemas/BigInteger"
        feeRecipient:
          $ref: "#/components/schemas/Address"
        feeMethod:
          type: "string"
          enum:
          - "PROTOCOL_FEE"
          - "SPLIT_FEE"
        side:
          type: "string"
          enum:
          - "BUY"
          - "SELL"
        saleKind:
          type: "string"
          enum:
          - "FIXED_PRICE"
          - "DUTCH_AUCTION"
        howToCall:
          type: "string"
          enum:
          - "CALL"
          - "DELEGATE_CALL"
        callData:
          $ref: "#/components/schemas/Binary"
        replacementPattern:
          $ref: "#/components/schemas/Binary"
        staticTarget:
          $ref: "#/components/schemas/Address"
        staticExtraData:
          $ref: "#/components/schemas/Binary"
        extra:
          $ref: "#/components/schemas/BigInteger"
        target:
          $ref: "#/components/schemas/Address"
    OrderCryptoPunksData:
      type: "object"
      required:
      - "dataType"
      properties:
        dataType:
          type: "string"
          enum:
          - "CRYPTO_PUNKS_DATA"
    Order:
      type: "object"
      required:
      - "maker"
      - "make"
      - "take"
      - "fill"
      - "makeStock"
      - "cancelled"
      - "salt"
      - "createdAt"
      - "lastUpdateAt"
      - "hash"
      properties:
        maker:
          $ref: "#/components/schemas/Address"
        taker:
          $ref: "#/components/schemas/Address"
        make:
          $ref: "#/components/schemas/Asset"
        take:
          $ref: "#/components/schemas/Asset"
        fill:
          $ref: "#/components/schemas/BigInteger"
        fillValue:
          $ref: "#/components/schemas/BigDecimal"
        start:
          type: "integer"
          format: "int64"
        end:
          type: "integer"
          format: "int64"
        makeStock:
          $ref: "#/components/schemas/BigInteger"
        makeStockValue:
          $ref: "#/components/schemas/BigDecimal"
        cancelled:
          type: "boolean"
        salt:
          $ref: "#/components/schemas/Word"
        signature:
          $ref: "#/components/schemas/Binary"
        createdAt:
          type: "string"
          format: "date-time"
        lastUpdateAt:
          type: "string"
          format: "date-time"
        pending:
          type: "array"
          items:
            $ref: "#/components/schemas/OrderExchangeHistory"
        hash:
          $ref: "#/components/schemas/Word"
        makeBalance:
          $ref: "#/components/schemas/BigInteger"
        makePrice:
          $ref: "#/components/schemas/BigDecimal"
        takePrice:
          $ref: "#/components/schemas/BigDecimal"
        makePriceUsd:
          deprecated: true
          $ref: "#/components/schemas/BigDecimal"
        takePriceUsd:
          deprecated: true
          $ref: "#/components/schemas/BigDecimal"
        priceHistory:
          type: "array"
          deprecated: true
          default: []
          items:
            $ref: "#/components/schemas/OrderPriceHistoryRecord"
        status:
          $ref: "#/components/schemas/OrderStatus"
      oneOf:
      - $ref: "#/components/schemas/LegacyOrder"
      - $ref: "#/components/schemas/RaribleV2Order"
      - $ref: "#/components/schemas/OpenSeaV1Order"
      - $ref: "#/components/schemas/CryptoPunkOrder"
    LegacyOrder:
      type: "object"
      required:
      - "type"
      - "data"
      properties:
        type:
          type: "string"
          enum:
          - "RARIBLE_V1"
        data:
          $ref: "#/components/schemas/OrderDataLegacy"
    RaribleV2Order:
      type: "object"
      required:
      - "type"
      - "data"
      properties:
        type:
          type: "string"
          enum:
          - "RARIBLE_V2"
        data:
          $ref: "#/components/schemas/OrderRaribleV2Data"
    OpenSeaV1Order:
      type: "object"
      required:
      - "type"
      - "data"
      properties:
        type:
          type: "string"
          enum:
          - "OPEN_SEA_V1"
        data:
          $ref: "#/components/schemas/OrderOpenSeaV1DataV1"
    CryptoPunkOrder:
      type: "object"
      required:
      - "type"
      - "data"
      properties:
        type:
          type: "string"
          enum:
          - "CRYPTO_PUNK"
        data:
          $ref: "#/components/schemas/OrderCryptoPunksData"
    OrderPriceHistoryRecord:
      type: "object"
      deprecated: true
      required:
      - "date"
      - "makeValue"
      - "takeValue"
      properties:
        date:
          type: "string"
          format: "date-time"
        makeValue:
          $ref: "#/components/schemas/BigDecimal"
        takeValue:
          $ref: "#/components/schemas/BigDecimal"
    OrderIds:
      type: "object"
      required:
      - "ids"
      properties:
        ids:
          type: "array"
          description: "List of the orders hash"
          items:
            $ref: "#/components/schemas/Word"
    OrderForm:
      type: "object"
      required:
      - "maker"
      - "make"
      - "take"
      - "signature"
      - "salt"
      properties:
        maker:
          $ref: "#/components/schemas/Address"
        taker:
          $ref: "#/components/schemas/Address"
        make:
          $ref: "#/components/schemas/OrderFormAsset"
        take:
          $ref: "#/components/schemas/OrderFormAsset"
        salt:
          $ref: "#/components/schemas/BigInteger"
        start:
          type: "integer"
          format: "int64"
        end:
          type: "integer"
          format: "int64"
        signature:
          $ref: "#/components/schemas/Binary"
      oneOf:
      - $ref: "#/components/schemas/LegacyOrderForm"
      - $ref: "#/components/schemas/RaribleV2OrderForm"
    OrderFormAsset:
      type: "object"
      required:
      - "assetType"
      - "value"
      properties:
        assetType:
          $ref: "#/components/schemas/AssetType"
        value:
          $ref: "#/components/schemas/BigInteger"
    LegacyOrderForm:
      type: "object"
      required:
      - "type"
      - "data"
      properties:
        type:
          type: "string"
          description: "Type of the order"
          enum:
          - "RARIBLE_V1"
        data:
          $ref: "#/components/schemas/OrderDataLegacy"
    RaribleV2OrderForm:
      type: "object"
      required:
      - "type"
      - "data"
      properties:
        type:
          type: "string"
          description: "Type of the order"
          enum:
          - "RARIBLE_V2"
        data:
          $ref: "#/components/schemas/OrderRaribleV2Data"
    Platform:
      type: "string"
      enum:
      - "RARIBLE"
      - "OPEN_SEA"
      - "CRYPTO_PUNKS"
    OrderSort:
      type: "string"
      enum:
      - "LAST_UPDATE_ASC"
      - "LAST_UPDATE_DESC"
    OrdersPagination:
      type: "object"
      required:
      - "orders"
      properties:
        orders:
          type: "array"
          description: "Orders list"
          items:
            $ref: "#/components/schemas/Order"
        continuation:
          type: "string"
          description: "Continuation token from the previous response"
    OrderCurrencies:
      type: "object"
      description: "List of distinct currencies in which payments for sell or bid\
        \ orders were suggested"
      required:
      - "orderType"
      - "currencies"
      properties:
        orderType:
          type: "string"
          enum:
          - "SELL"
          - "BID"
        currencies:
          type: "array"
          items:
            $ref: "#/components/schemas/AssetType"
    OrderEvent:
      type: "object"
      required:
      - "eventId"
      - "orderId"
      properties:
        eventId:
          type: "string"
        orderId:
          type: "string"
      oneOf:
      - $ref: "#/components/schemas/OrderUpdateEvent"
    OrderUpdateEvent:
      type: "object"
      required:
      - "order"
      properties:
        type:
          type: "string"
          enum:
          - "UPDATE"
        order:
          $ref: "#/components/schemas/Order"
    NftOrdersPriceUpdateEvent:
      type: "object"
      required:
      - "eventId"
      - "contract"
      - "tokenId"
      - "orders"
      properties:
        eventId:
          type: "string"
        contract:
          $ref: "#/components/schemas/Address"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        orders:
          type: "array"
          items:
            $ref: "#/components/schemas/Order"
      oneOf:
      - $ref: "#/components/schemas/NftSellOrdersPriceUpdateEvent"
      - $ref: "#/components/schemas/NftBidOrdersPriceUpdateEvent"
    NftSellOrdersPriceUpdateEvent:
      type: "object"
      required:
      - "@type"
      properties:
        '@type':
          type: "string"
          enum:
          - "SELL_ORDERS_PRICE_UPDATE"
    NftBidOrdersPriceUpdateEvent:
      type: "object"
      required:
      - "@type"
      properties:
        '@type':
          type: "string"
          enum:
          - "BID_ORDERS_PRICE_UPDATE"
    PrepareOrderTxForm:
      type: "object"
      required:
      - "maker"
      - "amount"
      - "payouts"
      - "originFees"
      properties:
        maker:
          $ref: "#/components/schemas/Address"
        amount:
          $ref: "#/components/schemas/BigInteger"
        payouts:
          type: "array"
          description: "Value of the payouts for the order"
          items:
            $ref: "#/components/schemas/Part"
        originFees:
          type: "array"
          description: "Value of the origin fees for the order"
          items:
            $ref: "#/components/schemas/Part"
    PrepareOrderTxResponse:
      type: "object"
      required:
      - "asset"
      - "transaction"
      properties:
        transferProxyAddress:
          $ref: "#/components/schemas/Address"
        asset:
          $ref: "#/components/schemas/Asset"
        transaction:
          $ref: "#/components/schemas/PreparedOrderTx"
    PreparedOrderTx:
      type: "object"
      required:
      - "to"
      - "data"
      properties:
        to:
          $ref: "#/components/schemas/Address"
        data:
          $ref: "#/components/schemas/Binary"
    EthereumSignatureValidationForm:
      required:
      - "signer"
      - "message"
      - "signature"
      type: "object"
      properties:
        signer:
          $ref: "#/components/schemas/Address"
        message:
          type: "string"
        signature:
          $ref: "#/components/schemas/Binary"
    ObjectNode:
      type: "object"
    AuctionSort:
      type: "string"
      enum:
      - "LAST_UPDATE_ASC"
      - "LAST_UPDATE_DESC"
      - "BUY_PRICE_ASC"
    AuctionIds:
      type: "object"
      required:
      - "ids"
      properties:
        ids:
          type: "array"
          description: "List of the auctions hash"
          items:
            $ref: "#/components/schemas/Word"
    AuctionsPagination:
      type: "object"
      required:
      - "auctions"
      properties:
        auctions:
          type: "array"
          items:
            $ref: "#/components/schemas/Auction"
        continuation:
          type: "string"
    AuctionBidsPagination:
      type: "object"
      required:
      - "bids"
      properties:
        bids:
          type: "array"
          items:
            $ref: "#/components/schemas/AuctionBid"
        continuation:
          type: "string"
    AuctionEvent:
      type: "object"
      required:
      - "eventId"
      - "auctionId"
      properties:
        eventId:
          type: "string"
        auctionId:
          type: "string"
      oneOf:
      - $ref: "#/components/schemas/AuctionUpdateEvent"
      - $ref: "#/components/schemas/AuctionDeleteEvent"
    AuctionUpdateEvent:
      type: "object"
      required:
      - "auction"
      properties:
        type:
          type: "string"
          enum:
          - "UPDATE"
        auction:
          $ref: "#/components/schemas/Auction"
    AuctionDeleteEvent:
      type: "object"
      required:
      - "auction"
      properties:
        type:
          type: "string"
          enum:
          - "DELETE"
        auction:
          $ref: "#/components/schemas/Auction"
    OrderCollectionStats:
      type: "object"
      properties:
        token:
          $ref: "#/components/schemas/Address"
        floorPrice:
          $ref: "#/components/schemas/BigDecimal"
        totalVolume:
          $ref: "#/components/schemas/BigDecimal"
        highestSale:
          $ref: "#/components/schemas/BigDecimal"
        lastUpdatedAt:
          type: "string"
          format: "date-time"
      required:
      - "token"
    NftOrderApiError:
      required:
      - "code"
      - "message"
      - "status"
      type: "object"
      properties:
        status:
          type: "integer"
          format: "int32"
        code:
          type: "string"
          enum:
          - "UNKNOWN"
          - "INVALID_ARGUMENT"
          - "ABSENCE_OF_REQUIRED_FIELD"
          - "UNLOCKABLE_API_ERROR"
          - "NFT_API_ERROR"
          - "ORDER_API_ERROR"
          - "UNEXPECTED_API_ERROR"
        message:
          type: "string"
    NftOrderItem:
      type: "object"
      required:
      - "id"
      - "contract"
      - "tokenId"
      - "unlockable"
      - "creators"
      - "supply"
      - "lazySupply"
      - "date"
      - "pending"
      - "totalStock"
      - "sellers"
      properties:
        id:
          type: "string"
          description: "Item identifier, has format '${token}:${tokenId}'"
        contract:
          $ref: "#/components/schemas/Address"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        unlockable:
          type: "boolean"
          description: "Was item locked"
        creators:
          type: "array"
          items:
            $ref: "#/components/schemas/Part"
        supply:
          $ref: "#/components/schemas/BigInteger"
        lazySupply:
          $ref: "#/components/schemas/BigInteger"
        owners:
          type: "array"
          deprecated: true
          description: "Owners of the target items"
          items:
            $ref: "#/components/schemas/Address"
        royalties:
          type: "array"
          deprecated: true
          description: "Use a special endpoint '/v0.1/items/{itemId}/royalty'"
          items:
            $ref: "#/components/schemas/Part"
        date:
          type: "string"
          format: "date-time"
        pending:
          type: "array"
          items:
            $ref: "#/components/schemas/ItemTransfer"
        meta:
          $ref: "#/components/schemas/NftItemMeta"
        bestSellOrder:
          $ref: "#/components/schemas/Order"
        bestBidOrder:
          $ref: "#/components/schemas/Order"
        totalStock:
          $ref: "#/components/schemas/BigInteger"
        sellers:
          type: "integer"
    NftOrderDeletedItem:
      required:
      - "id"
      - "token"
      - "tokenId"
      type: "object"
      properties:
        id:
          type: "string"
        token:
          $ref: "#/components/schemas/Address"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
    NftOrderItemEvent:
      required:
      - "eventId"
      - "itemId"
      properties:
        eventId:
          type: "string"
        itemId:
          type: "string"
      oneOf:
      - $ref: "#/components/schemas/NftOrderItemUpdateEvent"
      - $ref: "#/components/schemas/NftOrderItemDeleteEvent"
    NftOrderItemUpdateEvent:
      type: "object"
      required:
      - "item"
      properties:
        type:
          type: "string"
          enum:
          - "UPDATE"
        item:
          $ref: "#/components/schemas/NftOrderItem"
    NftOrderItemDeleteEvent:
      type: "object"
      required:
      - "item"
      properties:
        type:
          type: "string"
          enum:
          - "DELETE"
        item:
          $ref: "#/components/schemas/NftOrderDeletedItem"
    NftOrderOwnership:
      type: "object"
      required:
      - "id"
      - "contract"
      - "tokenId"
      - "owner"
      - "value"
      - "lazyValue"
      - "date"
      - "pending"
      properties:
        id:
          type: "string"
          description: "Ownership identifier, has format '${token}:${tokenId}:${owner}'"
        contract:
          $ref: "#/components/schemas/Address"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        owner:
          $ref: "#/components/schemas/Address"
        creators:
          type: "array"
          deprecated: true
          items:
            $ref: "#/components/schemas/Part"
        value:
          $ref: "#/components/schemas/BigInteger"
        lazyValue:
          $ref: "#/components/schemas/BigInteger"
        date:
          type: "string"
          format: "date-time"
        pending:
          type: "array"
          description: "History of ownership"
          items:
            $ref: "#/components/schemas/ItemHistory"
        bestSellOrder:
          $ref: "#/components/schemas/Order"
    NftOrderDeletedOwnership:
      required:
      - "id"
      - "token"
      - "tokenId"
      - "owner"
      type: "object"
      properties:
        id:
          type: "string"
        token:
          $ref: "#/components/schemas/Address"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        owner:
          $ref: "#/components/schemas/Address"
    NftOrderOwnershipEvent:
      required:
      - "eventId"
      - "ownershipId"
      properties:
        eventId:
          type: "string"
        ownershipId:
          type: "string"
      oneOf:
      - $ref: "#/components/schemas/NftOrderOwnershipUpdateEvent"
      - $ref: "#/components/schemas/NftOrderOwnershipDeleteEvent"
    NftOrderOwnershipUpdateEvent:
      type: "object"
      required:
      - "ownership"
      properties:
        type:
          type: "string"
          enum:
          - "UPDATE"
        ownership:
          $ref: "#/components/schemas/NftOrderOwnership"
    NftOrderOwnershipDeleteEvent:
      type: "object"
      required:
      - "ownership"
      properties:
        type:
          type: "string"
          enum:
          - "DELETE"
        ownership:
          $ref: "#/components/schemas/NftOrderDeletedOwnership"
    NftOrderOwnershipsPage:
      required:
      - "data"
      type: "object"
      properties:
        continuation:
          type: "string"
          description: "Continuation token to paginate the search result"
        data:
          type: "array"
          description: "List of found data items"
          items:
            $ref: "#/components/schemas/NftOrderOwnership"
    NftOrderItemsPage:
      required:
      - "data"
      type: "object"
      properties:
        continuation:
          type: "string"
          description: "Continuation token to paginate the search result"
        data:
          type: "array"
          description: "List of found data items"
          items:
            $ref: "#/components/schemas/NftOrderItem"
  responses:
    NftOwnershipsPage:
      description: "OK"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NftOwnerships"
    NftCollectionsPage:
      description: "OK"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NftCollections"
    NftItemsPage:
      description: "OK"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NftItems"
    BadRequest:
      description: "Bad Request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EthereumApiErrorBadRequest"
    ServerError:
      description: "Internal Server Error"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EthereumApiErrorServerError"
    EntityNotFound:
      description: "Not Found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EthereumApiErrorEntityNotFound"
    OrderPage:
      description: "OK"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrdersPagination"
    OrderCurrenciesPage:
      description: "OK"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrderCurrencies"
    OrderBidsPage:
      description: "OK"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrderBidsPagination"
    AggregationDataResponse:
      description: "OK"
      content:
        application/json:
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/AggregationData"
    AuctionPage:
      description: "OK"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuctionsPagination"
    AuctionBidPage:
      description: "OK"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuctionBidsPagination"
    OrderUpdateApiError:
      description: "Bad Request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EthereumOrderUpdateApiError"
    OrderDataApiError:
      description: "Bad Request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EthereumOrderDataApiError"
    NftOrderActivityPage:
      description: "OK"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Activities"
    NftOrderOwnershipsPage:
      description: "OK"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NftOrderOwnershipsPage"
    NftOrderItemsPage:
      description: "OK"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NftOrderItemsPage"
